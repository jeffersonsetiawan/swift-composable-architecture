{"seeAlsoSections":[{"title":"Integrations","anchor":"Integrations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit"],"generated":true}],"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/observationbackport"]}],"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"metadata":{"title":"Observation backport","role":"article","roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}]},"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"article","identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservationBackport","interfaceLanguage":"swift"},"abstract":[{"type":"text","text":"Learn how the Observation framework from Swift 5.9 was backported to support iOS 16 and earlier,"},{"type":"text","text":" "},{"type":"text","text":"as well as the caveats of using the backported tools."}],"primaryContentSections":[{"content":[{"type":"heading","level":2,"anchor":"Overview","text":"Overview"},{"type":"paragraph","inlineContent":[{"text":"With version 1.7 of the Composable Architecture we have introduced support for Swift 5.9‚Äôs","type":"text"},{"type":"text","text":" "},{"type":"text","text":"observation tools, "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"text":" we have backported those tools to work in iOS 13 and later. Using the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"observation tools in pre-iOS 17 does require a few additional steps and there are some gotchas to be"},{"type":"text","text":" "},{"type":"text","text":"aware of."}]},{"type":"heading","text":"The Perception framework","level":2,"anchor":"The-Perception-framework"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture comes with a framework known as Perception, which is our backport of"},{"text":" ","type":"text"},{"type":"text","text":"Swift 5.9‚Äôs Observation to iOS 13, macOS 12, tvOS 13 and watchOS 6. For all of the tools in the"},{"type":"text","text":" "},{"text":"Observation framework there is a corresponding tool in Perception.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, instead of the "},{"type":"codeVoice","code":"@Observable"},{"text":" macro, there is the ","type":"text"},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" macro:"}]},{"syntax":"swift","type":"codeListing","code":["@Perceptible","class CounterModel {","  var count = 0","}"]},{"type":"paragraph","inlineContent":[{"text":"However, in order for a view to properly observe changes to a ‚Äúperceptible‚Äù model, you must","type":"text"},{"type":"text","text":" "},{"type":"text","text":"remember to wrap the contents of your view in the "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":" view:","type":"text"}]},{"type":"codeListing","code":["struct CounterView: View {","  let model = CounterModel()","","  var body: some View {","    WithPerceptionTracking {","      Form {","        Text(self.model.count.description)","        Button(\"Decrement\") { self.model.count -= 1 }","        Button(\"Increment\") { self.model.count += 1 }","      }","    }","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This will make sure that the view subscribes to any fields accessed in the "},{"type":"codeVoice","code":"@Perceptible"},{"type":"text","text":" model so"},{"text":" ","type":"text"},{"type":"text","text":"that changes to those fields invalidate the view and cause it to re-render."}]},{"inlineContent":[{"text":"If a field of a ","type":"text"},{"type":"codeVoice","code":"@Percetible"},{"text":" model is accessed in a view while ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" inside"},{"type":"text","text":" "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":", then a runtime warning will be triggered:"}],"type":"paragraph"},{"name":"üü£ Runtime Warning","style":"note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Perceptible state was accessed but is not being tracked. Track changes to"},{"type":"text","text":" "},{"type":"text","text":"state by wrapping your view in a ‚ÄòWithPerceptionTracking‚Äô view."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"To debug this, expand the warning in the Issue Navigator of Xcode (‚åò5), and click through the stack","type":"text"},{"type":"text","text":" "},{"text":"frames displayed to find the line in your view where you are accessing state without being inside","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":"."}]},{"type":"heading","text":"Bindings","anchor":"Bindings","level":2},{"inlineContent":[{"type":"text","text":"If you want to derive bindings from the store (see "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings"},{"text":" for more information), then you","type":"text"},{"type":"text","text":" "},{"type":"text","text":"would typically use the "},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper that comes with SwiftUI:"}],"type":"paragraph"},{"code":["struct MyView: View {","  @Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"],"syntax":"swift","type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"However, ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":" is iOS 17+. So, the Perception library comes with a tool that can be used in","type":"text"},{"text":" ","type":"text"},{"text":"its place until you can target iOS 17 and later. You just have to qualify ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":" with the"},{"type":"text","text":" "},{"type":"codeVoice","code":"Perception"},{"type":"text","text":" namespace:"}]},{"type":"codeListing","syntax":"swift","code":["struct MyView: View {","  @Perception.Bindable var store: StoreOf<MyFeature>","  \/\/ ...","}"]},{"anchor":"Gotchas","type":"heading","level":2,"text":"Gotchas"},{"type":"paragraph","inlineContent":[{"type":"text","text":"There are a few gotchas to be aware of when using "},{"code":"WithPerceptionTracking","type":"codeVoice"},{"text":".","type":"text"}]},{"anchor":"Lazy-view-closures","level":3,"text":"Lazy view closures","type":"heading"},{"inlineContent":[{"text":"There are many ‚Äúlazy‚Äù closures in SwiftUI that evaluate only when something happens in the view, and","type":"text"},{"type":"text","text":" "},{"text":"not necessarily in the same stack frames as the ","type":"text"},{"code":"body","type":"codeVoice"},{"text":" of the view. For example, the trailing","type":"text"},{"type":"text","text":" "},{"type":"text","text":"closure of "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" is called "},{"inlineContent":[{"text":"after","type":"text"}],"type":"emphasis"},{"type":"text","text":" the "},{"code":"body","type":"codeVoice"},{"type":"text","text":" of the view has been computed."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This means that even if you wrap the body of the view in "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    Text(store.title)","  }","}"]},{"inlineContent":[{"text":"‚Ä¶the access to the row‚Äôs ","type":"text"},{"type":"codeVoice","code":"store.title"},{"text":" happens ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"outside"}]},{"type":"text","text":" "},{"type":"codeVoice","code":"WithPerceptionTracking"},{"type":"text","text":", and hence will"},{"text":" ","type":"text"},{"type":"text","text":"not work and will trigger a runtime warning as described above."}],"type":"paragraph"},{"inlineContent":[{"text":"The fix for this is to wrap the content of the trailing closure in another ","type":"text"},{"code":"WithPerceptionTracking","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","code":["WithPerceptionTracking {","  ForEach(store.scope(state: \\.rows, action: \\.rows), id: \\.state.id) { store in","    WithPerceptionTracking {","      Text(store.title)","    }","  }","}"],"type":"codeListing"},{"type":"heading","text":"Mixing legacy and modern features together","anchor":"Mixing-legacy-and-modern-features-together","level":3},{"type":"paragraph","inlineContent":[{"type":"text","text":"Some problems can arise when mixing together features built in the ‚Äúlegacy‚Äù style, using"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"text":", and features built in the ‚Äúmodern‚Äù style, using the","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","isActive":true,"type":"reference"},{"text":" macro. The problems mostly manifest themselves as re-computing view bodies","type":"text"},{"type":"text","text":" "},{"type":"text","text":"more often than necessary, but that can also put strain on SwiftUI‚Äôs ability to figure out what"},{"text":" ","type":"text"},{"text":"state changed, and can cause glitches or exacerbate navigation bugs.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating"},{"type":"text","text":" for more information about this."}]}],"kind":"content"}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/UIKit":{"role":"collectionGroup","title":"UIKit Integration","type":"topic","url":"\/documentation\/composablearchitecture\/uikit","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/UIKit","kind":"article","abstract":[{"type":"text","text":"Integrating the Composable Architecture into a UIKit application."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftConcurrency":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftConcurrency","url":"\/documentation\/composablearchitecture\/swiftconcurrency","abstract":[{"type":"text","text":"Learn how to write safe, concurrent effects using Swift‚Äôs structured concurrency."}],"role":"article","type":"topic","kind":"article","title":"Adopting Swift concurrency"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true,"title":"ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState()":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState()","type":"topic","url":"\/documentation\/composablearchitecture\/observablestate()","role":"symbol","kind":"symbol","title":"ObservableState()","abstract":[{"type":"text","text":"Defines and implements conformance of the Observable protocol."}],"fragments":[{"kind":"keyword","text":"macro"},{"kind":"text","text":" "},{"text":"ObservableState","kind":"identifier"},{"text":"()","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"title":"Working with SwiftUI bindings","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","url":"\/documentation\/composablearchitecture\/bindings","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7#Incrementally-migrating":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7#Incrementally-migrating","url":"\/documentation\/composablearchitecture\/migratingto1.7#Incrementally-migrating","type":"topic","kind":"section","abstract":[],"title":"Incrementally migrating"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","deprecated":true,"role":"symbol","kind":"symbol","title":"WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}]}}}