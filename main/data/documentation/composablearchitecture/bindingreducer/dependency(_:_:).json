{"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/bindingreducer\/dependency(_:_:)"]}],"kind":"symbol","sections":[],"abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations"]]},"schemaVersion":{"major":0,"minor":3,"patch":0},"metadata":{"modules":[{"name":"ComposableArchitecture"}],"roleHeading":"Instance Method","title":"dependency(_:_:)","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","text":"WritableKeyPath","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"externalID":"s:22ComposableArchitecture7ReducerPAAE10dependencyyAA021_DependencyKeyWritingC0VyxGs08WritableF4PathCy12Dependencies0E6ValuesVqd__G_qd__tlF::SYNTHESIZED::s:22ComposableArchitecture14BindingReducerV","symbolKind":"method","role":"symbol","extendedModule":"ComposableArchitecture"},"primaryContentSections":[{"declarations":[{"tokens":[{"text":"@warn_unqualified_access","kind":"attribute"},{"text":" ","kind":"text"},{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"text":"keyPath","kind":"internalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"value"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"languages":["swift"],"platforms":["macOS"]}],"kind":"declarations"},{"parameters":[{"content":[{"inlineContent":[{"text":"A key path that indicates the property of the ","type":"text"},{"code":"DependencyValues","type":"codeVoice"},{"text":" structure to","type":"text"},{"type":"text","text":" "},{"text":"update.","type":"text"}],"type":"paragraph"}],"name":"keyPath"},{"content":[{"inlineContent":[{"text":"The new value to set for the item specified by ","type":"text"},{"code":"keyPath","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}],"name":"value"}],"kind":"parameters"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"type":"paragraph","inlineContent":[{"type":"text","text":"A reducer that has the given value set in its dependencies."}]}],"kind":"content"},{"kind":"content","content":[{"anchor":"discussion","type":"heading","text":"Discussion","level":2},{"type":"paragraph","inlineContent":[{"type":"text","text":"This overrides the dependency specified by "},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":" for the execution of the receiving"},{"type":"text","text":" "},{"type":"text","text":"reducer "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" all of its effects. It can be useful for altering the dependencies for just"},{"text":" ","type":"text"},{"text":"one portion of your application, while letting the rest of the application continue using the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"default live dependencies."}]},{"type":"paragraph","inlineContent":[{"text":"For example, suppose you are creating an onboarding experience to teach people how to use one","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of your features. This can be done by constructing a new reducer that embeds the core"},{"type":"text","text":" "},{"text":"feature’s domain and layers on additional logic:","type":"text"}]},{"code":["@Reducer","struct Onboarding {","  struct State {","    var feature: Feature.State","    \/\/ Additional onboarding state","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ Additional onboarding actions","  }","","  var body: some Reducer<State, Action> {","    Scope(state: \\.feature, action: \\.feature) {","      Feature()","    }","","    Reduce { state, action in","      \/\/ Additional onboarding logic","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This can work just fine, but the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer will have access to all of the live"},{"text":" ","type":"text"},{"text":"dependencies by default, and that might not be ideal. For example, the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer"},{"type":"text","text":" "},{"text":"may need to make API requests and read\/write from user defaults. It may be preferable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to run the "},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer in an alternative environment for onboarding purposes, such"},{"type":"text","text":" "},{"text":"as an API client that returns some mock data or an in-memory user defaults so that the","type":"text"},{"type":"text","text":" "},{"text":"onboarding experience doesn’t accidentally trample on shared data.","type":"text"}]},{"inlineContent":[{"type":"text","text":"This can be by using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/dependency(_:_:)","isActive":true,"type":"reference"},{"type":"text","text":" method to override those dependencies"},{"type":"text","text":" "},{"type":"text","text":"just for the "},{"code":"Feature","type":"codeVoice"},{"text":" reducer and its effects:","type":"text"}],"type":"paragraph"},{"code":["var body: some Reducer<State, Action> {","  Scope(state: \\.feature, action: \\.feature) {","    Feature()","      .dependency(\\.apiClient, .mock)","      .dependency(\\.userDefaults, .mock)","  }","","  Reduce { state, action in","    \/\/ Additional onboarding logic","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"type":"text","text":"See "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/transformDependency(_:transform:)"},{"text":" for a similar method that can inspect and modify the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"current dependency when overriding."}],"type":"paragraph"}]}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/dependency(_:_:)"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer":{"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/bindingreducer","abstract":[{"type":"text","text":"A reducer that updates bindable state when it receives binding actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer","title":"BindingReducer","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingReducer","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"BindingReducer"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/transformDependency(_:transform:)":{"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"transformDependency"},{"kind":"text","text":"<"},{"text":"V","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"V"},{"text":">, ","kind":"text"},{"text":"transform","kind":"externalParam"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"V","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":">"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingreducer\/transformdependency(_:transform:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/transformDependency(_:transform:)","abstract":[{"text":"Transform a reducer’s dependency value at the specified key path with the given function.","type":"text"}],"role":"symbol","kind":"symbol","title":"transformDependency(_:transform:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/dependency(_:_:)":{"role":"symbol","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"DependencyValues","kind":"typeIdentifier","preciseIdentifier":"s:12Dependencies16DependencyValuesV"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}],"url":"\/documentation\/composablearchitecture\/bindingreducer\/dependency(_:_:)","abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/dependency(_:_:)","title":"dependency(_:_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingReducer/Reducer-Implementations":{"title":"Reducer Implementations","kind":"article","type":"topic","abstract":[],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingReducer\/Reducer-Implementations","url":"\/documentation\/composablearchitecture\/bindingreducer\/reducer-implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"}}}