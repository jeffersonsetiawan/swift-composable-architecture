{"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11"},"primaryContentSections":[{"kind":"content","content":[{"text":"Overview","type":"heading","level":2,"anchor":"Overview"},{"type":"paragraph","inlineContent":[{"text":"The Composable Architecture is under constant development, and we are always looking for ways to","type":"text"},{"type":"text","text":" "},{"text":"simplify the library, and make it more powerful. This version of the library introduced 2 new","type":"text"},{"type":"text","text":" "},{"text":"APIs and deprecated 1 API.","type":"text"}]},{"content":[{"inlineContent":[{"type":"text","text":"Before following this migration guide be sure you have fully migrated to the newest"},{"type":"text","text":" "},{"type":"text","text":"tools of version 1.10. See "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","type":"reference","isActive":true},{"text":" for more information.","type":"text"}],"type":"paragraph"}],"style":"important","name":"Important","type":"aside"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Mutating-shared-state-concurrently"}]}]},{"content":[{"inlineContent":[{"identifier":"#Supplying-mock-read-only-state-to-previews","isActive":true,"type":"reference"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"reference","isActive":true,"identifier":"#Migrating-to-1112"}],"type":"paragraph"}]}],"type":"unorderedList"},{"type":"heading","level":2,"text":"Mutating shared state concurrently","anchor":"Mutating-shared-state-concurrently"},{"inlineContent":[{"text":"Version 1.10 of the Composable Architecture introduced a powerful tool for","type":"text"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","overridingTitle":"sharing state","overridingTitleInlineContent":[{"text":"sharing state","type":"text"}],"type":"reference"},{"text":" amongst your features. And you can mutate a piece of shared","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state directly, as if it were just a normal property on a value type:"}],"type":"paragraph"},{"code":["case .incrementButtonTapped:","  state.count += 1","  return .none"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"And if you only ever mutate shared state from a reducer, then this is completely fine to do.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"However, because shared values are secretly references (that is how data is shared), it is possible"},{"type":"text","text":" "},{"text":"to mutate shared values from effects, which means concurrently. And prior to 1.11, it was possible","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to do this directly:"}]},{"code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1","  }"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"Now, ","type":"text"},{"type":"codeVoice","code":"Shared"},{"type":"text","text":" is "},{"type":"codeVoice","code":"Sendable"},{"type":"text","text":", and is technically thread-safe in that it will not crash when writing"},{"text":" ","type":"text"},{"text":"to it from two different threads. However, allowing direct mutation does make the value susceptible","type":"text"},{"text":" ","type":"text"},{"text":"to race conditions. If you were to perform ","type":"text"},{"code":"count += 1","type":"codeVoice"},{"type":"text","text":" from 1,000 threads, it is possible for"},{"type":"text","text":" "},{"text":"the final value to not be 1,000.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We wanted the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" type to be as ergonomic as possible, and that is why we make it directly"},{"type":"text","text":" "},{"text":"mutable, but we should not be allowing these mutations to happen from asynchronous contexts. And so","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"now the "},{"code":"wrappedValue","type":"codeVoice"},{"type":"text","text":" setter has been marked unavailable from asynchronous contexts, with"},{"text":" ","type":"text"},{"text":"a helpful message of how to fix:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    count += 1  \/\/ ⚠️ Use '$shared.withLock' instead of mutating directly.","  }"]},{"inlineContent":[{"text":"To fix this deprecation you can use the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method on the projected value of "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":":"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["case .delayedIncrementButtonTapped:","  return .run { _ in","    @Shared(.count) var count","    $count.withLock { $0 += 1 }","  }"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This locks the entire unit of work of reading the current count, incrementing it, and storing it"},{"text":" ","type":"text"},{"type":"text","text":"back in the reference."}]},{"type":"paragraph","inlineContent":[{"text":"Technically it is still possible to write code that has race conditions, such as this silly example:","type":"text"}]},{"code":["let currentCount = count","$count.withLock { $0 = currentCount + 1 }"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"But there is no way to 100% prevent race conditions in code. Even actors are susceptible to problems","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"due to re-entrancy. To avoid problems like the above we recommend wrapping as many mutations of the"},{"type":"text","text":" "},{"text":"shared state as possible in a single ","type":"text"},{"code":"withLock","type":"codeVoice"},{"type":"text","text":". That will make sure that the full unit of work is"},{"type":"text","text":" "},{"type":"text","text":"guarded by a lock."}]},{"type":"heading","text":"Supplying mock read-only state to previews","anchor":"Supplying-mock-read-only-state-to-previews","level":2},{"inlineContent":[{"type":"text","text":"A new "},{"type":"codeVoice","code":"constant"},{"type":"text","text":" helper on "},{"type":"codeVoice","code":"SharedReader"},{"type":"text","text":" has been introduced to simplify supplying mock data to"},{"type":"text","text":" "},{"text":"Xcode previews. It works like SwiftUI’s ","type":"text"},{"type":"codeVoice","code":"Binding.constant"},{"text":", but for shared references:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["#Preview {","  FeatureView(","    store: Store(","      initialState: Feature.State(count: .constant(42))","    ) {","      Feature()","    }","  )",")"]},{"anchor":"Migrating-to-1112","level":2,"type":"heading","text":"Migrating to 1.11.2"},{"inlineContent":[{"type":"text","text":"A few bug fixes landed in 1.11.2 that may be source breaking. They are described below:"}],"type":"paragraph"},{"level":3,"anchor":"withLock-is-now-MainActor","type":"heading","text":"`withLock` is now `@MainActor`"},{"inlineContent":[{"type":"text","text":"In "},{"overridingTitle":"version 1.11","type":"reference","overridingTitleInlineContent":[{"text":"version 1.11","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","isActive":true},{"text":" of the library we deprecated mutating shared state from","type":"text"},{"type":"text","text":" "},{"text":"asynchronous contexts, such as effects, and instead recommended using the new ","type":"text"},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method."},{"text":" ","type":"text"},{"text":"Doing so made it possible to lock all mutations to the shared state and prevent race conditions (see","type":"text"},{"text":" ","type":"text"},{"text":"the ","type":"text"},{"overridingTitleInlineContent":[{"text":"migration guide","type":"text"}],"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","overridingTitle":"migration guide","isActive":true},{"text":" for more info).","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"However, this did leave open the possibility for deadlocks if shared state was read from and written","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"to on different threads. To fix this we have now restricted "},{"code":"withLock","type":"codeVoice"},{"text":" to the ","type":"text"},{"type":"codeVoice","code":"@MainActor"},{"text":", and so","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you will now need to "},{"type":"codeVoice","code":"await"},{"type":"text","text":" its usage:"}],"type":"paragraph"},{"type":"codeListing","syntax":"diff","code":["-sharedCount.withLock { $0 += 1 }","+await sharedCount.withLock { $0 += 1 }"]},{"inlineContent":[{"text":"The compiler should suggest this fix-it for you.","type":"text"}],"type":"paragraph"},{"type":"heading","text":"Optional dynamic member lookup on `Shared` is deprecated\/disfavored","anchor":"Optional-dynamic-member-lookup-on-Shared-is-deprecateddisfavored","level":3},{"inlineContent":[{"type":"text","text":"When the "},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" property wrapper was first introduced, its dynamic member lookup was overloaded"},{"type":"text","text":" "},{"type":"text","text":"to automatically unwrap optionals for ergonomic purposes:"}],"type":"paragraph"},{"syntax":"swift","code":["if let sharedUnwrappedProperty = $shared.optionalProperty {","  \/\/ ...","}"],"type":"codeListing"},{"inlineContent":[{"text":"This unfortunately made dynamic member lookup a little more difficult to understand:","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["$shared.optionalProperty  \/\/ Shared<Value>?, *not* Shared<Value?>"]},{"type":"paragraph","inlineContent":[{"text":"…and required casting and other tricks to transform shared values into what one might expect.","type":"text"}]},{"inlineContent":[{"text":"And so this dynamic member lookup is deprecated and has been disfavored, and will eventually be","type":"text"},{"type":"text","text":" "},{"text":"removed entirely. Instead, you can use ","type":"text"},{"code":"Shared.init(_:)","type":"codeVoice"},{"type":"text","text":" to explicitly unwrap a shared optional"},{"type":"text","text":" "},{"type":"text","text":"value."}],"type":"paragraph"},{"inlineContent":[{"text":"Disfavoring it does have the consequence of being source breaking in the case of ","type":"text"},{"type":"codeVoice","code":"if let"},{"type":"text","text":" and"},{"text":" ","type":"text"},{"type":"codeVoice","code":"guard let"},{"type":"text","text":" expressions, where Swift does not select the optional overload automatically. To"},{"type":"text","text":" "},{"text":"migrate, use ","type":"text"},{"code":"Shared.init(_:)","type":"codeVoice"},{"text":":","type":"text"}],"type":"paragraph"},{"syntax":"diff","code":["-if let sharedUnwrappedProperty = $shared.optionalProperty {","+if let sharedUnwrappedProperty = Shared($shared.optionalProperty) {","   \/\/ ..."," }"],"type":"codeListing"}]}],"schemaVersion":{"patch":0,"major":0,"minor":3},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4"],"generated":true}],"metadata":{"modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"Migrating to 1.11","roleHeading":"Article"},"sections":[],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides"]]},"abstract":[{"type":"text","text":"Update your code to use the new "},{"type":"codeVoice","code":"withLock"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"text":"contexts, rather than mutating the underlying wrapped value directly.","type":"text"}],"kind":"article","variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/composablearchitecture\/migratingto1.11"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigrationGuides":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigrationGuides","title":"Migration guides","abstract":[{"type":"text","text":"Learn how to upgrade your application to the newest version of the Composable Architecture."}],"kind":"article","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/migrationguides","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.6":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.6","title":"Migrating to 1.6","url":"\/documentation\/composablearchitecture\/migratingto1.6","role":"article","abstract":[{"type":"text","text":"Update your code to make use of the new"},{"type":"text","text":" "},{"code":"TestStore\/receive(_:_:timeout:assert:fileID:file:line:column:)-9jd7x","type":"codeVoice"},{"type":"text","text":" method when you need to"},{"type":"text","text":" "},{"text":"assert on the payload inside an action received.","type":"text"}],"type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.7":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.7","title":"Migrating to 1.7","abstract":[{"text":"Update your code to make use of the new observation tools in the library and get rid of legacy","type":"text"},{"type":"text","text":" "},{"type":"text","text":"APIs such as "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":", "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore"},{"type":"text","text":", "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore"},{"type":"text","text":", and more."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.7","type":"topic"},"#Supplying-mock-read-only-state-to-previews":{"identifier":"#Supplying-mock-read-only-state-to-previews","title":"Supplying mock read-only state to previews","url":"#Supplying-mock-read-only-state-to-previews","titleInlineContent":[{"text":"Supplying mock read-only state to previews","type":"text"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17","title":"Migrating to 1.17","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":"@Shared"},{"type":"text","text":" property wrapper and related tools have been extracted to their own"},{"type":"text","text":" "},{"type":"text","text":"library so that they can be used in non-Composable Architecture applications. This a"},{"type":"text","text":" "},{"type":"text","text":"backwards compatible change, but some new deprecations have been introduced."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.11":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.11","title":"Migrating to 1.11","url":"\/documentation\/composablearchitecture\/migratingto1.11","role":"article","abstract":[{"type":"text","text":"Update your code to use the new "},{"code":"withLock","type":"codeVoice"},{"type":"text","text":" method for mutating shared state from asynchronous"},{"type":"text","text":" "},{"type":"text","text":"contexts, rather than mutating the underlying wrapped value directly."}],"type":"topic","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.14":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.14","title":"Migrating to 1.14","abstract":[{"type":"text","text":"The "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" type is now officially "},{"code":"@MainActor","type":"codeVoice"},{"type":"text","text":" isolated."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.14","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.12":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.12","title":"Migrating to 1.12","url":"\/documentation\/composablearchitecture\/migratingto1.12","role":"article","abstract":[{"type":"text","text":"Take advantage of custom decoding and encoding logic for the shared file storage persistence"},{"type":"text","text":" "},{"type":"text","text":"strategy, as well as beta support for Swift’s native Testing framework."}],"type":"topic","kind":"article"},"#Migrating-to-1112":{"identifier":"#Migrating-to-1112","title":"Migrating to 1.11.2","url":"#Migrating-to-1112","titleInlineContent":[{"type":"text","text":"Migrating to 1.11.2"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.15":{"url":"\/documentation\/composablearchitecture\/migratingto1.15","abstract":[{"type":"text","text":"The library has been completely updated for Swift 6 language mode, and now compiles in strict"},{"type":"text","text":" "},{"type":"text","text":"concurrency with no warnings or errors."}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.15","title":"Migrating to 1.15"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.10":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.10","title":"Migrating to 1.10","abstract":[{"type":"text","text":"Update your code to make use of the new state sharing tools in the library, such as the "},{"code":"Shared","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"property wrapper, and the "},{"code":"appStorage","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"fileStorage"},{"type":"text","text":" persistence strategies."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.10","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/dependency(_:)":{"url":"\/documentation\/composablearchitecture\/reducer\/dependency(_:)","abstract":[{"type":"text","text":"Places a value in the reducer’s dependencies."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"dependency"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)","title":"dependency(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","deprecated":true,"role":"symbol","kind":"symbol","title":"WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.8":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.8","title":"Migrating to 1.8","abstract":[{"text":"Update your code to make use of the new capabilities of the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","type":"reference"},{"text":" macro, including automatic","type":"text"},{"type":"text","text":" "},{"text":"fulfillment of requirements for destination reducers and path reducers.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.8","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IfLetStore"}],"kind":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","deprecated":true,"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.16":{"url":"\/documentation\/composablearchitecture\/migratingto1.16","abstract":[{"text":"The ","type":"text"},{"type":"codeVoice","code":".appStorage"},{"text":" strategy used with ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"text":" now uses key-value observing instead of","type":"text"},{"type":"text","text":" "},{"code":"NotificationCenter","type":"codeVoice"},{"type":"text","text":" when possible. Learn how this may affect your code."}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.16","title":"Migrating to 1.16"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.9":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.9","title":"Migrating to 1.9","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"code":"TestStore\/send(_:assert:fileID:file:line:column:)-8877x","type":"codeVoice"},{"type":"text","text":""},{"text":" ","type":"text"},{"text":"method on ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","isActive":true,"type":"reference"},{"type":"text","text":" which gives a succinct syntax for sending actions with case key paths, and"},{"text":" ","type":"text"},{"type":"text","text":"the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/dependency(_:)"},{"type":"text","text":" method for overriding dependencies."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.9","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","title":"scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"title":"ForEachStore","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.5":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.5","title":"Migrating to 1.5","abstract":[{"type":"text","text":"Update your code to make use of the new "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","type":"reference"},{"type":"text","text":" operation on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"in order to improve the performance of your features and simplify the usage of navigation APIs."}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.5","type":"topic"},"#Mutating-shared-state-concurrently":{"identifier":"#Mutating-shared-state-concurrently","title":"Mutating shared state concurrently","url":"#Mutating-shared-state-concurrently","titleInlineContent":[{"text":"Mutating shared state concurrently","type":"text"}],"type":"link"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer()":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()","abstract":[{"type":"text","text":"Helps implement the conformance to the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","type":"reference","isActive":true},{"text":" protocol for a type.","type":"text"}],"fragments":[{"kind":"keyword","text":"macro"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Reducer"},{"kind":"text","text":"()"}],"title":"Reducer()","url":"\/documentation\/composablearchitecture\/reducer()","kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.4":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.4","title":"Migrating to 1.4","abstract":[{"text":"Update your code to make use of the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer()"},{"text":" macro, and learn how to better leverage case key","type":"text"},{"type":"text","text":" "},{"text":"paths in your features.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.4","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"url":"\/documentation\/composablearchitecture\/sharingstate","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"type":"text","text":" "},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","title":"Sharing state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.17.1":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.17.1","title":"Migrating to 1.17.1","abstract":[{"text":"The Sharing library has graduated, with backwards-incompatible changes, to 2.0, and the Composable","type":"text"},{"type":"text","text":" "},{"text":"Architecture has been updated to extend support to this new version.","type":"text"}],"kind":"article","role":"article","url":"\/documentation\/composablearchitecture\/migratingto1.17.1","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/MigratingTo1.13":{"url":"\/documentation\/composablearchitecture\/migratingto1.13","abstract":[{"text":"The Composable Architecture now provides first class tools for building features in UIKit,","type":"text"},{"type":"text","text":" "},{"text":"including minimal state observation, presentation and stack navigation.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/MigratingTo1.13","title":"Migrating to 1.13"}}}