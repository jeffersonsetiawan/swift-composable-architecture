{"abstract":[{"type":"text","text":"Learn about the two main forms of state-driven navigation, tree-based and stack-based navigation,"},{"type":"text","text":" "},{"type":"text","text":"as well as their tradeoffs."}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"],["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation"]]},"kind":"article","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WhatIsNavigation"},"variants":[{"paths":["\/documentation\/composablearchitecture\/whatisnavigation"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"schemaVersion":{"minor":3,"major":0,"patch":0},"metadata":{"roleHeading":"Article","modules":[{"name":"ComposableArchitecture"}],"role":"article","title":"What is navigation?"},"primaryContentSections":[{"content":[{"type":"heading","text":"Overview","level":2,"anchor":"Overview"},{"inlineContent":[{"text":"State-driven navigation broadly falls into 2 main categories: tree-based, where you use optionals","type":"text"},{"text":" ","type":"text"},{"text":"and enums to model navigation, and stack-based, where you use flat collections to model navigation.","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Nearly all navigations will use a combination of the two styles, but it is important to know"},{"type":"text","text":" "},{"type":"text","text":"their strengths and weaknesses."}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Tree-based-navigation"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"#Stack-based-navigation"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"#Tree-based-vs-stack-based-navigation","isActive":true}]},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Pros-of-tree-based-navigation","isActive":true,"type":"reference"}]}]},{"content":[{"inlineContent":[{"type":"reference","identifier":"#Cons-of-tree-based-navigation","isActive":true}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"identifier":"#Pros-of-stack-based-navigation","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"#Cons-of-stack-based-navigation"}]}]}],"type":"unorderedList"}]}]},{"type":"heading","anchor":"Defining-navigation","text":"Defining navigation","level":2},{"inlineContent":[{"text":"The word “navigation” can mean a lot of different things to different people. For example, most","type":"text"},{"type":"text","text":" "},{"text":"people would say that an example of “navigation” is the drill-down style of navigation afforded to","type":"text"},{"text":" ","type":"text"},{"text":"us by ","type":"text"},{"code":"NavigationStack","type":"codeVoice"},{"text":" in SwiftUI and ","type":"text"},{"code":"UINavigationController","type":"codeVoice"},{"type":"text","text":" in UIKit “navigation”."},{"text":" ","type":"text"},{"text":"However, if drill-downs are considered navigation, then surely sheets and fullscreen covers should","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"be too.  The only difference is that sheets and covers animate from bottom-to-top instead of from"},{"type":"text","text":" "},{"text":"right-to-left, but is that actually substantive?","type":"text"}],"type":"paragraph"},{"inlineContent":[{"text":"And if sheets and covers are considered navigation, then certainly popovers should be too. We can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"even expand our horizons to include more styles of navigation, such as alerts and confirmation"},{"type":"text","text":" "},{"type":"text","text":"dialogs, and even custom forms of navigation that are not handed down to us from Apple."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"So, for the purposes of this documentation, we will use the following loose definition of"},{"type":"text","text":" "},{"text":"“navigation”:","type":"text"}]},{"name":"Definition","style":"note","content":[{"inlineContent":[{"type":"text","text":""},{"type":"strong","inlineContent":[{"type":"text","text":"Navigation"}]},{"type":"text","text":" is a change of mode in the application."}],"type":"paragraph"}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Each of the examples we considered above, such as drill-downs, sheets, popovers, covers, alerts,","type":"text"},{"type":"text","text":" "},{"text":"dialogs, and more, are all a “change of mode” in the application.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"But, so far we have just defined one term, “navigation”, by using another undefined term,","type":"text"},{"type":"text","text":" "},{"text":"“change of mode”, so we will further make the following definition:","type":"text"}]},{"type":"aside","name":"Definition","content":[{"inlineContent":[{"type":"text","text":"A "},{"inlineContent":[{"type":"text","text":"change of mode"}],"type":"strong"},{"type":"text","text":" is when some piece of state goes from not existing to existing,"},{"text":" ","type":"text"},{"type":"text","text":"or vice-versa."}],"type":"paragraph"}],"style":"note"},{"inlineContent":[{"type":"text","text":"So, when a piece of state switches from not existing to existing, that represents a navigation and"},{"type":"text","text":" "},{"type":"text","text":"change of mode in the application, and when the state switches back to not existing, it represents"},{"type":"text","text":" "},{"type":"text","text":"undoing the navigation and returning to the previous mode."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is very abstract way of describing state-driven navigation, and the next two sections make"},{"type":"text","text":" "},{"type":"text","text":"these concepts much more concrete for the two main forms of state-driven navigation:"},{"type":"text","text":" "},{"overridingTitleInlineContent":[{"type":"text","text":"tree-based"}],"type":"reference","identifier":"#Tree-based-navigation","isActive":true,"overridingTitle":"tree-based"},{"type":"text","text":" and "},{"overridingTitleInlineContent":[{"text":"stack-based","type":"text"}],"overridingTitle":"stack-based","isActive":true,"identifier":"#Stack-based-navigation","type":"reference"},{"type":"text","text":" navigation."}]},{"text":"Tree-based navigation","anchor":"Tree-based-navigation","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"In the previous section we defined state-driven navigation as being controlled by the existence or"},{"text":" ","type":"text"},{"text":"non-existence of state. The term “existence” was not defined, and there are a few ways in which","type":"text"},{"type":"text","text":" "},{"type":"text","text":"existence can be defined. If we define the existence or non-existence of state as being represented"},{"text":" ","type":"text"},{"text":"by Swift’s ","type":"text"},{"code":"Optional","type":"codeVoice"},{"text":" type, then we call this “tree-based” navigation because when multiple states","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of navigation are nested they form a tree-like structure."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"For example, suppose you have an inventory feature with a list of items such that tapping one of"},{"type":"text","text":" "},{"text":"those items performs a drill-down navigation to a detail screen for the item. Then that can be","type":"text"},{"type":"text","text":" "},{"text":"modeled with the ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" macro pointing to some optional state:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct InventoryFeature {","  @ObservableState","  struct State {","    @Presents var detailItem: DetailItemFeature.State?","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then, inside that detail screen there may be a button to edit the item in a sheet, and that too can"},{"type":"text","text":" "},{"type":"text","text":"be modeled with the "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()"},{"type":"text","text":" macro pointing to a piece of optional state:"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct DetailItemFeature {","  @ObservableState","  struct State {","    @Presents var editItem: EditItemFeature.State?","    \/\/ ...","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"And further, inside the “edit item” feature there can be a piece of optional state that represents"},{"text":" ","type":"text"},{"type":"text","text":"whether or not an alert is displayed:"}]},{"type":"codeListing","syntax":"swift","code":["@Reducer","struct EditItemFeature {","  struct State {","    @Presents var alert: AlertState<AlertAction>?","    \/\/ ...","  }","  \/\/ ...","}"]},{"inlineContent":[{"type":"text","text":"And this can continue on and on for as many layers of navigation that exist in the application."}],"type":"paragraph"},{"inlineContent":[{"text":"With that done, the act of deep-linking into the application is a mere exercise in constructing","type":"text"},{"type":"text","text":" "},{"text":"a piece of deeply nested state. So, if we wanted to launch the inventory view into a state where","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"we are drilled down to a particular item "},{"inlineContent":[{"text":"with","type":"text"}],"type":"emphasis"},{"type":"text","text":" the edit sheet opened "},{"type":"emphasis","inlineContent":[{"text":"and","type":"text"}]},{"type":"text","text":" an alert opened, we"},{"type":"text","text":" "},{"type":"text","text":"simply need to construct the piece of state that represents the navigation:"}],"type":"paragraph"},{"code":["InventoryView(","  store: Store(","    initialState: InventoryFeature.State(","      detailItem: DetailItemFeature.State(      \/\/ Drill-down to detail screen","        editItem: EditItemFeature.State(        \/\/ Open edit modal","          alert: AlertState {                   \/\/ Open alert","            TextState(\"This item is invalid.\")","          }","        )","      )","    )","  ) {","    InventoryFeature()","  }",")"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"In the above we can start to see the tree-like structure of this form of domain modeling. Each"},{"type":"text","text":" "},{"text":"feature in your application represents a node of the tree, and each destination you can navigate to","type":"text"},{"type":"text","text":" "},{"text":"represents a branch from the node. Then the act of navigating to a new feature corresponds to","type":"text"},{"text":" ","type":"text"},{"text":"building another nested piece of state.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is the basics of tree-based navigation. Read the dedicated "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation"},{"type":"text","text":" article"},{"text":" ","type":"text"},{"type":"text","text":"for information on how to use the tools that come with the Composable Architecture to implement"},{"type":"text","text":" "},{"text":"tree-based navigation in your application.","type":"text"}]},{"anchor":"Stack-based-navigation","type":"heading","level":2,"text":"Stack-based navigation"},{"inlineContent":[{"text":"In the ","type":"text"},{"identifier":"#Tree-based-navigation","type":"reference","overridingTitle":"previous section","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"previous section"}]},{"type":"text","text":" we defined “tree-based” navigation as the process"},{"type":"text","text":" "},{"text":"of modeling the presentation of a child feature with optional state. This takes on a tree-like","type":"text"},{"type":"text","text":" "},{"type":"text","text":"structure in which a deeply nested feature is represented by a deeply nested piece of state."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"There is another powerful tool for modeling the existence and non-existence of state for driving"},{"type":"text","text":" "},{"type":"text","text":"navigation: collections. This is most used with SwiftUI’s "},{"type":"codeVoice","code":"NavigationStack"},{"text":" view in which","type":"text"},{"text":" ","type":"text"},{"text":"an entire stack of features are represented by a collection of data. When an item is added to the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"collection it represents a new feature being pushed onto the stack, and when an item is removed from"},{"text":" ","type":"text"},{"text":"the collection it represents popping the feature off the stack.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"Typically one defines an enum that holds all of the possible features that can be navigated to on","type":"text"},{"type":"text","text":" "},{"text":"the stack, so continuing the analogy from the previous section, if an inventory list can navigate to","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"a detail feature for an item and then navigate to an edit screen, this can be represented by:"}]},{"type":"codeListing","syntax":"swift","code":["enum Path {","  case detail(DetailItemFeature.State)","  case edit(EditItemFeature.State)","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"Then a collection of these states represents the features that are presented on the stack:"}]},{"type":"codeListing","syntax":"swift","code":["let path: [Path] = [","  .detail(DetailItemFeature.State(item: item)),","  .edit(EditItemFeature.State(item: item)),","  \/\/ ...","]"]},{"inlineContent":[{"type":"text","text":"This collection of "},{"code":"Path","type":"codeVoice"},{"type":"text","text":" elements can be any length necessary, including very long to represent"},{"type":"text","text":" "},{"type":"text","text":"being drilled down many layers deep, or even empty to represent that we are at the root of the"},{"text":" ","type":"text"},{"text":"stack.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"That is the basics of stack-based navigation. Read the dedicated","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","type":"reference","isActive":true},{"text":" article for information on how to use the tools that come with the","type":"text"},{"text":" ","type":"text"},{"text":"Composable Architecture to implement stack-based navigation in your application.","type":"text"}]},{"type":"heading","anchor":"Tree-based-vs-stack-based-navigation","level":2,"text":"Tree-based vs stack-based navigation"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Most real-world applications will use a mixture of tree-based and stack-based navigation. For"},{"text":" ","type":"text"},{"text":"example, the root of your application may use stack-based navigation with a","type":"text"},{"type":"text","text":" "},{"code":"NavigationStack","type":"codeVoice"},{"text":" view, but then each feature inside the stack may use tree-based","type":"text"},{"type":"text","text":" "},{"type":"text","text":"navigation for showing sheets, popovers, alerts, etc. But, there are pros and cons to each form of"},{"type":"text","text":" "},{"text":"navigation, and so it can be important to be aware of their differences when modeling your domains.","type":"text"}]},{"text":"Pros of tree-based navigation","anchor":"Pros-of-tree-based-navigation","type":"heading","level":4},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"text":"Tree-based navigation is a very concise way of modeling navigation. You get to statically","type":"text"},{"type":"text","text":" "},{"type":"text","text":"describe all of the various navigation paths that are valid for your application, and that makes"},{"type":"text","text":" "},{"type":"text","text":"it impossible to restore a navigation that is invalid for your application. For example, if it"},{"type":"text","text":" "},{"type":"text","text":"only makes sense to navigate to an “edit” screen after a “detail” screen, then your detail"},{"text":" ","type":"text"},{"type":"text","text":"feature needs only to hold onto a piece of optional edit state:"}]},{"code":["@ObservableState","struct State {","  @Presents var editItem: EditItemFeature.State?","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This statically enforces the relationship that we can only navigate to the edit screen from the","type":"text"},{"type":"text","text":" "},{"text":"detail screen.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Related to the previous pro, tree-based navigation also allows you to describe the finite number"},{"type":"text","text":" "},{"text":"of navigation paths that your app supports.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you modularize the features of your application, then those feature modules will be more"},{"type":"text","text":" "},{"type":"text","text":"self-contained when built with the tools of tree-based navigation. This means that Xcode"},{"type":"text","text":" "},{"type":"text","text":"previews and preview apps built for the feature will be fully functional."}]},{"inlineContent":[{"type":"text","text":"For example, if you have a "},{"type":"codeVoice","code":"DetailFeature"},{"type":"text","text":" module that holds all of the logic and views for the"},{"text":" ","type":"text"},{"type":"text","text":"detail feature, then you will be able to navigate to the edit feature in previews because the"},{"type":"text","text":" "},{"text":"edit feature’s domain is directly embedded in the detail feature.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Related to the previous pro, because features are tightly integrated together it makes writing"},{"type":"text","text":" "},{"type":"text","text":"unit tests for their integration very simple. You can write deep and nuanced tests that assert"},{"text":" ","type":"text"},{"type":"text","text":"how the detail feature and edit feature integrate together, allowing you to prove that they"},{"type":"text","text":" "},{"text":"interact in the correct way.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Tree-based navigation unifies all forms of navigation into a single, concise style of API,"},{"text":" ","type":"text"},{"type":"text","text":"including drill-downs, sheets, popovers, covers, alerts, dialogs and a lot more. See"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#API-Unification"},{"text":" for more information.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Cons-of-tree-based-navigation","level":4,"text":"Cons of tree-based navigation","type":"heading"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Unfortunately it can be cumbersome to express complex or recursive navigation paths using"},{"text":" ","type":"text"},{"text":"tree-based navigation. For example, in a movie application you can navigate to a movie, then a","type":"text"},{"type":"text","text":" "},{"text":"list of actors in the movies, then to a particular actor, and then to the same movie you started","type":"text"},{"text":" ","type":"text"},{"text":"at. This creates a recursive dependency between features that can be difficult to model in Swift","type":"text"},{"type":"text","text":" "},{"text":"data types.","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"By design, tree-based navigation couples features together. If you can navigate to an edit","type":"text"},{"type":"text","text":" "},{"type":"text","text":"feature from a detail feature, then you must be able to compile the entire edit feature in order"},{"type":"text","text":" "},{"type":"text","text":"to compile the detail feature. This can eventually slow down compile times, especially when you"},{"type":"text","text":" "},{"text":"work on features closer to the root of the application since you must build all destination","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"features."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Historically, tree-based navigation is more susceptible to SwiftUI’s navigation bugs, in"},{"type":"text","text":" "},{"type":"text","text":"particular when dealing with drill-down navigation. However, many of these bugs have been fixed"},{"type":"text","text":" "},{"text":"in iOS 16.4 and so is less of a concern these days.","type":"text"}],"type":"paragraph"}]}]},{"anchor":"Pros-of-stack-based-navigation","text":"Pros of stack-based navigation","level":4,"type":"heading"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Stack-based navigation can easily handle complex and recursive navigation paths. The example we"},{"text":" ","type":"text"},{"text":"considered earlier, that of navigating through movies and actors, is handily accomplished with","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"an array of feature states:"}]},{"syntax":"swift","code":["let path: [Path] = [","  .movie(\/* ... *\/),","  .actors(\/* ... *\/),","  .actor(\/* ... *\/),","  .movies(\/* ... *\/),","  .movie(\/* ... *\/),","]"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"Notice that we start on the movie feature and end on the movie feature. There is no real"},{"type":"text","text":" "},{"text":"recursion in this navigation since it is just a flat array.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Each feature held in the stack can typically be fully decoupled from all other screens on the"},{"type":"text","text":" "},{"type":"text","text":"stack. This means the features can be put into their own modules with no dependencies on each"},{"type":"text","text":" "},{"text":"other, and can be compiled without compiling any other features.","type":"text"}]}]},{"content":[{"inlineContent":[{"type":"text","text":"The "},{"code":"NavigationStack","type":"codeVoice"},{"type":"text","text":" API in SwiftUI typically has fewer bugs than"},{"type":"text","text":" "},{"type":"codeVoice","code":"NavigationLink(isActive:)"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"navigationDestination(isPresented:)"},{"text":", which are used in tree-based","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"navigation. There are still a few bugs in "},{"code":"NavigationStack","type":"codeVoice"},{"text":", but on average it is a lot","type":"text"},{"type":"text","text":" "},{"text":"more stable.","type":"text"}],"type":"paragraph"}]}],"type":"unorderedList"},{"level":4,"text":"Cons of stack-based navigation","type":"heading","anchor":"Cons-of-stack-based-navigation"},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"text":"Stack-based navigation is not a concise tool. It makes it possible to express navigation","type":"text"},{"type":"text","text":" "},{"type":"text","text":"paths that are completely non-sensical. For example, even though it only makes sense to navigate"},{"type":"text","text":" "},{"type":"text","text":"to an edit screen from a detail screen, in a stack it would be possible to present the features"},{"text":" ","type":"text"},{"type":"text","text":"in the reverse order:"}],"type":"paragraph"},{"type":"codeListing","code":["let path: [Path] = [","  .edit(\/* ... *\/),","  .detail(\/* ... *\/)","]"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"That is completely non-sensical. What does it mean to drill down to an edit screen and ","type":"text"},{"inlineContent":[{"type":"text","text":"then"}],"type":"emphasis"},{"type":"text","text":" "},{"type":"text","text":"a detail screen. You can create other non-sensical navigation paths, such as multiple edit"},{"text":" ","type":"text"},{"text":"screens pushed on one after another:","type":"text"}]},{"type":"codeListing","syntax":"swift","code":["let path: [Path] = [","  .edit(\/* ... *\/),","  .edit(\/* ... *\/),","  .edit(\/* ... *\/),","]"]},{"type":"paragraph","inlineContent":[{"type":"text","text":"This too is completely non-sensical, and it is a drawback to the stack-based approach when you"},{"text":" ","type":"text"},{"type":"text","text":"want a finite number of well-defined navigation paths in your app."}]}]},{"content":[{"inlineContent":[{"text":"If you were to modularize your application and put each feature in its own module, then those","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"features, when run in isolation in an Xcode preview, would be mostly inert. For example, a"},{"type":"text","text":" "},{"type":"text","text":"button in the detail feature for drilling down to the edit feature can’t possibly work in an"},{"type":"text","text":" "},{"text":"Xcode preview since the detail and edit features have been completely decoupled. This makes it","type":"text"},{"type":"text","text":" "},{"text":"so that you cannot test all of the functionality of the detail feature in an Xcode preview, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead have to resort to compiling and running the full application in order to preview"},{"text":" ","type":"text"},{"type":"text","text":"everything."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Related to the above, it is also more difficult to unit test how multiple features integrate"},{"type":"text","text":" "},{"type":"text","text":"with each other. Because features are fully decoupled we cannot easily test how the detail and"},{"type":"text","text":" "},{"type":"text","text":"edit feature interact with each other. The only way to write that test is to compile and run the"},{"text":" ","type":"text"},{"text":"entire application.","type":"text"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"And finally, stack-based navigation and "},{"type":"codeVoice","code":"NavigationStack"},{"type":"text","text":" only applies to drill-downs"},{"text":" ","type":"text"},{"text":"and does not address at all other forms of navigation, such as sheets, popovers, alerts, etc.","type":"text"},{"type":"text","text":" "},{"text":"It’s still on you to do the work to decouple those kinds of navigations.","type":"text"}]}]}]},{"type":"thematicBreak"},{"type":"paragraph","inlineContent":[{"text":"We have now defined the basic terms of navigation, in particular state-driven navigation, and we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"have further divided navigation into two categories: tree-based and stack-based. Continue reading"},{"text":" ","type":"text"},{"type":"text","text":"the dedicated articles "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation"},{"text":" and ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","isActive":true},{"type":"text","text":" to learn about the"},{"type":"text","text":" "},{"text":"tools the Composable Architecture provides for modeling your domains and integrating features","type":"text"},{"type":"text","text":" "},{"type":"text","text":"together for navigation."}]}],"kind":"content"}],"references":{"#Pros-of-stack-based-navigation":{"url":"#Pros-of-stack-based-navigation","title":"Pros of stack-based navigation","type":"link","identifier":"#Pros-of-stack-based-navigation","titleInlineContent":[{"type":"text","text":"Pros of stack-based navigation"}]},"#Cons-of-stack-based-navigation":{"url":"#Cons-of-stack-based-navigation","title":"Cons of stack-based navigation","type":"link","identifier":"#Cons-of-stack-based-navigation","titleInlineContent":[{"text":"Cons of stack-based navigation","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation":{"abstract":[{"text":"Learn about tree-based navigation, that is navigation modeled with optionals and enums, including","type":"text"},{"type":"text","text":" "},{"type":"text","text":"how to model your domains, how to integrate features, how to test your features, and more."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/treebasednavigation","title":"Tree-based navigation","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","title":"PresentationState","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationState"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"type":"topic","abstract":[{"text":"Wraps a property with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"text":" and observes it.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Presents","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/presents()","title":"Presents()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StackBasedNavigation":{"title":"Stack-based navigation","abstract":[{"text":"Learn about stack-based navigation, that is navigation modeled with collections, including how to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"model your domains, how to integrate features, how to test your features, and more."}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StackBasedNavigation","url":"\/documentation\/composablearchitecture\/stackbasednavigation","role":"article"},"#Tree-based-navigation":{"url":"#Tree-based-navigation","title":"Tree-based navigation","type":"link","identifier":"#Tree-based-navigation","titleInlineContent":[{"type":"text","text":"Tree-based navigation"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TreeBasedNavigation#API-Unification":{"url":"\/documentation\/composablearchitecture\/treebasednavigation#API-Unification","kind":"section","title":"API Unification","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TreeBasedNavigation#API-Unification","abstract":[]},"#Tree-based-vs-stack-based-navigation":{"url":"#Tree-based-vs-stack-based-navigation","title":"Tree-based vs stack-based navigation","type":"link","identifier":"#Tree-based-vs-stack-based-navigation","titleInlineContent":[{"text":"Tree-based vs stack-based navigation","type":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"#Cons-of-tree-based-navigation":{"url":"#Cons-of-tree-based-navigation","title":"Cons of tree-based navigation","type":"link","identifier":"#Cons-of-tree-based-navigation","titleInlineContent":[{"type":"text","text":"Cons of tree-based navigation"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Navigation":{"title":"Navigation","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Navigation","kind":"article","type":"topic","url":"\/documentation\/composablearchitecture\/navigation","role":"collectionGroup","abstract":[{"type":"text","text":"Learn how to use the navigation tools in the library, including how to best model your domains, how"},{"type":"text","text":" "},{"type":"text","text":"to integrate features in the reducer and view layers, and how to write tests."}]},"#Stack-based-navigation":{"url":"#Stack-based-navigation","title":"Stack-based navigation","type":"link","identifier":"#Stack-based-navigation","titleInlineContent":[{"text":"Stack-based navigation","type":"text"}]},"#Pros-of-tree-based-navigation":{"url":"#Pros-of-tree-based-navigation","title":"Pros of tree-based navigation","type":"link","identifier":"#Pros-of-tree-based-navigation","titleInlineContent":[{"type":"text","text":"Pros of tree-based navigation"}]}}}