{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"]]},"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"content","kind":"identifier"},{"text":": (","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Content","kind":"typeIdentifier"}],"platforms":["macOS"]}]}],"kind":"symbol","identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content"},"metadata":{"roleHeading":"Instance Property","symbolKind":"property","role":"symbol","modules":[{"name":"ComposableArchitecture"}],"platforms":[],"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"kind":"identifier","text":"content"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Content"}],"externalID":"s:22ComposableArchitecture11SwitchStoreV7contentyq0_xcvp","title":"content"},"variants":[{"paths":["\/documentation\/composablearchitecture\/switchstore\/content"],"traits":[{"interfaceLanguage":"swift"}]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use 'switch' with a store of observable state, instead. For more information, see the following article: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Replacing-SwitchStore-and-CaseLet-with-switch-and-case]"}]}],"schemaVersion":{"major":0,"patch":0,"minor":3},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"title":"CaseLet","url":"\/documentation\/composablearchitecture\/caselet","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CaseLet","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore/content":{"kind":"symbol","url":"\/documentation\/composablearchitecture\/switchstore\/content","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore\/content","title":"content","deprecated":true,"fragments":[{"kind":"keyword","text":"let"},{"kind":"text","text":" "},{"text":"content","kind":"identifier"},{"text":": (","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Content"}],"type":"topic","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"type":"topic","title":"SwitchStore","url":"\/documentation\/composablearchitecture\/switchstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","title":"Deprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}]}}}