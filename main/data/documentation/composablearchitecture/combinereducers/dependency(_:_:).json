{"kind":"symbol","metadata":{"modules":[{"name":"ComposableArchitecture"}],"extendedModule":"ComposableArchitecture","symbolKind":"method","title":"dependency(_:_:)","role":"symbol","roleHeading":"Instance Method","externalID":"s:22ComposableArchitecture7ReducerPAAE10dependencyyAA021_DependencyKeyWritingC0VyxGs08WritableF4PathCy12Dependencies0E6ValuesVqd__G_qd__tlF::SYNTHESIZED::s:22ComposableArchitecture15CombineReducersV","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"dependency","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"kind":"text","text":">("},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"typeIdentifier","text":"Value"},{"text":") -> ","kind":"text"},{"kind":"typeIdentifier","text":"_DependencyKeyWritingReducer"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]},"primaryContentSections":[{"declarations":[{"languages":["swift"],"platforms":["macOS"],"tokens":[{"text":"@warn_unqualified_access","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"Value"},{"text":">(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"keyPath"},{"text":": ","kind":"text"},{"text":"WritableKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC"},{"kind":"text","text":"<"},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">, "},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"value"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}]}],"kind":"declarations"},{"parameters":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A key path that indicates the property of the "},{"code":"DependencyValues","type":"codeVoice"},{"text":" structure to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"update."}]}],"name":"keyPath"},{"content":[{"type":"paragraph","inlineContent":[{"text":"The new value to set for the item specified by ","type":"text"},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":"."}]}],"name":"value"}],"kind":"parameters"},{"kind":"content","content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"inlineContent":[{"text":"A reducer that has the given value set in its dependencies.","type":"text"}],"type":"paragraph"}]},{"kind":"content","content":[{"level":2,"type":"heading","anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This overrides the dependency specified by "},{"type":"codeVoice","code":"keyPath"},{"type":"text","text":" for the execution of the receiving"},{"text":" ","type":"text"},{"text":"reducer ","type":"text"},{"inlineContent":[{"type":"text","text":"and"}],"type":"emphasis"},{"type":"text","text":" all of its effects. It can be useful for altering the dependencies for just"},{"text":" ","type":"text"},{"type":"text","text":"one portion of your application, while letting the rest of the application continue using the"},{"text":" ","type":"text"},{"type":"text","text":"default live dependencies."}]},{"inlineContent":[{"text":"For example, suppose you are creating an onboarding experience to teach people how to use one","type":"text"},{"type":"text","text":" "},{"text":"of your features. This can be done by constructing a new reducer that embeds the core","type":"text"},{"text":" ","type":"text"},{"text":"feature’s domain and layers on additional logic:","type":"text"}],"type":"paragraph"},{"code":["@Reducer","struct Onboarding {","  struct State {","    var feature: Feature.State","    \/\/ Additional onboarding state","  }","  enum Action {","    case feature(Feature.Action)","    \/\/ Additional onboarding actions","  }","","  var body: some Reducer<State, Action> {","    Scope(state: \\.feature, action: \\.feature) {","      Feature()","    }","","    Reduce { state, action in","      \/\/ Additional onboarding logic","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"This can work just fine, but the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer will have access to all of the live"},{"text":" ","type":"text"},{"text":"dependencies by default, and that might not be ideal. For example, the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer"},{"text":" ","type":"text"},{"type":"text","text":"may need to make API requests and read\/write from user defaults. It may be preferable"},{"type":"text","text":" "},{"text":"to run the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer in an alternative environment for onboarding purposes, such"},{"type":"text","text":" "},{"text":"as an API client that returns some mock data or an in-memory user defaults so that the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"onboarding experience doesn’t accidentally trample on shared data."}],"type":"paragraph"},{"inlineContent":[{"type":"text","text":"This can be by using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","isActive":true,"type":"reference"},{"text":" method to override those dependencies","type":"text"},{"text":" ","type":"text"},{"text":"just for the ","type":"text"},{"type":"codeVoice","code":"Feature"},{"type":"text","text":" reducer and its effects:"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["var body: some Reducer<State, Action> {","  Scope(state: \\.feature, action: \\.feature) {","    Feature()","      .dependency(\\.apiClient, .mock)","      .dependency(\\.userDefaults, .mock)","  }","","  Reduce { state, action in","    \/\/ Additional onboarding logic","  }","}"]},{"inlineContent":[{"type":"text","text":"See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/transformDependency(_:transform:)","isActive":true},{"type":"text","text":" for a similar method that can inspect and modify the"},{"type":"text","text":" "},{"type":"text","text":"current dependency when overriding."}],"type":"paragraph"}]}],"schemaVersion":{"minor":3,"patch":0,"major":0},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","interfaceLanguage":"swift"},"variants":[{"paths":["\/documentation\/composablearchitecture\/combinereducers\/dependency(_:_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"sections":[],"abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/Reducer-Implementations"]]},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/Reducer-Implementations":{"role":"collectionGroup","title":"Reducer Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/Reducer-Implementations","abstract":[],"type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/combinereducers\/reducer-implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/dependency(_:_:)":{"title":"dependency(_:_:)","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/combinereducers\/dependency(_:_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/dependency(_:_:)","abstract":[{"text":"Sets the dependency value of the specified key path to the given value.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"dependency"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath"},{"text":"<","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":">, ","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers":{"role":"symbol","title":"CombineReducers","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers","navigatorTitle":[{"text":"CombineReducers","kind":"identifier"}],"abstract":[{"text":"Combines multiple reducers into a single reducer.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CombineReducers"}],"type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/combinereducers"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CombineReducers/transformDependency(_:transform:)":{"abstract":[{"text":"Transform a reducer’s dependency value at the specified key path with the given function.","type":"text"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/combinereducers\/transformdependency(_:transform:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"transformDependency","kind":"identifier"},{"text":"<","kind":"text"},{"text":"V","kind":"genericParameter"},{"kind":"text","text":">("},{"preciseIdentifier":"s:s15WritableKeyPathC","kind":"typeIdentifier","text":"WritableKeyPath"},{"kind":"text","text":"<"},{"text":"DependencyValues","preciseIdentifier":"s:12Dependencies16DependencyValuesV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"V"},{"text":">, ","kind":"text"},{"kind":"externalParam","text":"transform"},{"text":": (","kind":"text"},{"text":"inout","kind":"keyword"},{"kind":"text","text":" "},{"text":"V","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":") -> ","kind":"text"},{"text":"_DependencyKeyWritingReducer","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Self"},{"text":">","kind":"text"}],"title":"transformDependency(_:transform:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CombineReducers\/transformDependency(_:transform:)","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect"}}}