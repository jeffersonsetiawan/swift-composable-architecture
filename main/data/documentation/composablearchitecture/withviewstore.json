{"schemaVersion":{"major":0,"patch":0,"minor":3},"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","interfaceLanguage":"swift"},"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Use '@ObservableState', instead. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#Using-ObservableState"}]}],"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"kind":"symbol","seeAlsoSections":[{"generated":true,"anchor":"View-containers","title":"View containers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore"]}],"variants":[{"paths":["\/documentation\/composablearchitecture\/withviewstore"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"anchor":"Creating-a-view","title":"Creating a view","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l"]},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)"],"anchor":"Debugging-view-updates","title":"Debugging view updates"},{"anchor":"Instance-Properties","title":"Instance Properties","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"],"generated":true},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations"],"generated":true,"title":"Default Implementations","anchor":"Default-Implementations"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@"},{"preciseIdentifier":"s:ScM","kind":"attribute","text":"MainActor"},{"text":" ","kind":"text"},{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"},{"text":"<","kind":"text"},{"text":"ViewState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ViewAction","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"Content","kind":"genericParameter"},{"kind":"text","text":"> "},{"text":"where","kind":"keyword"},{"kind":"text","text":" "},{"text":"Content","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"View","kind":"typeIdentifier","preciseIdentifier":"s:7SwiftUI4ViewP"}]}]},{"kind":"content","content":[{"anchor":"overview","text":"Overview","level":2,"type":"heading"},{"inlineContent":[{"type":"text","text":"This helper is an alternative to observing the view store manually on your view, which requires"},{"type":"text","text":" "},{"type":"text","text":"the boilerplate of a custom initializer."}],"type":"paragraph"},{"name":"Important","type":"aside","content":[{"inlineContent":[{"type":"text","text":"It is important to properly leverage the "},{"code":"observe","type":"codeVoice"},{"type":"text","text":" argument in order to observe"},{"type":"text","text":" "},{"type":"text","text":"only the state that your view needs to do its job. See the “Performance” section below for more"},{"type":"text","text":" "},{"text":"information.","type":"text"}],"type":"paragraph"}],"style":"important"},{"inlineContent":[{"type":"text","text":"For example, the following view, which manually observes the store it is handed by constructing"},{"type":"text","text":" "},{"text":"a view store in its initializer:","type":"text"}],"type":"paragraph"},{"type":"codeListing","code":["struct ProfileView: View {","  let store: StoreOf<Profile>","  @ObservedObject var viewStore: ViewStoreOf<Profile>","","  init(store: StoreOf<Profile>) {","    self.store = store","    self.viewStore = ViewStore(store, observe: { $0 })","  }","","  var body: some View {","    Text(\"\\(self.viewStore.username)\")","    \/\/ ...","  }","}"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"…can be written more simply using ","type":"text"},{"type":"codeVoice","code":"WithViewStore"},{"text":":","type":"text"}]},{"code":["struct ProfileView: View {","  let store: StoreOf<Profile>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      Text(\"\\(viewStore.username)\")","      \/\/ ...","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"type":"text","text":"There may be times where the slightly more verbose style of observing a store is preferred"},{"type":"text","text":" "},{"type":"text","text":"instead of using "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"text":":","type":"text"}],"type":"paragraph"},{"type":"orderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"When "},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore"},{"type":"text","text":" wraps complex views the Swift compiler can quickly become bogged"},{"type":"text","text":" "},{"type":"text","text":"down, leading to degraded compiler performance and diagnostics. If you are experiencing"},{"type":"text","text":" "},{"text":"such instability you should consider manually setting up observation with an","type":"text"},{"type":"text","text":" "},{"type":"codeVoice","code":"@ObservedObject"},{"text":" property as described above.","type":"text"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Sometimes you may want to observe the state in a store in a context that is not a view"},{"text":" ","type":"text"},{"text":"builder. In such cases ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"type":"text","text":" will not work since it is intended only for"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI views."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"An example of this is interfacing with SwiftUI’s "},{"type":"codeVoice","code":"App"},{"type":"text","text":" protocol, which uses a separate"},{"text":" ","type":"text"},{"type":"codeVoice","code":"@SceneBuilder"},{"text":" instead of ","type":"text"},{"type":"codeVoice","code":"@ViewBuilder"},{"type":"text","text":". In this case you must use an "},{"type":"codeVoice","code":"@ObservedObject"},{"text":":","type":"text"}]},{"syntax":"swift","code":["@main","struct MyApp: App {","  let store = StoreOf<AppFeature>(\/* ... *\/)","  @ObservedObject var viewStore: ViewStore<SceneState, CommandAction>","","  struct SceneState: Equatable {","    \/\/ ...","    init(state: AppFeature.State) {","      \/\/ ...","    }","  }","","  init() {","    self.viewStore = ViewStore(","      self.store.scope(","        state: SceneState.init(state:)","        action: AppFeature.Action.scene","      )","    )","  }","","  var body: some Scene {","    WindowGroup {","      MyRootView()","    }","    .commands {","      CommandMenu(\"Help\") {","        Button(\"About \\(self.viewStore.appName)\") {","          self.viewStore.send(.aboutButtonTapped)","        }","      }","    }","  }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Note that it is highly discouraged for you to observe "},{"type":"emphasis","inlineContent":[{"type":"text","text":"all"}]},{"type":"text","text":" of your root store’s state."},{"type":"text","text":" "},{"type":"text","text":"It is almost never needed and will cause many view recomputations leading to poor"},{"type":"text","text":" "},{"text":"performance. This is why we construct a separate ","type":"text"},{"type":"codeVoice","code":"SceneState"},{"type":"text","text":" type that holds onto only the"},{"type":"text","text":" "},{"type":"text","text":"state that the view needs for rendering. See "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","isActive":true},{"text":" for more information on this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"topic."}]}]}]},{"type":"paragraph","inlineContent":[{"text":"If your view does not need access to any state in the store and only needs to be able to send","type":"text"},{"type":"text","text":" "},{"type":"text","text":"actions, then you should consider not using "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference"},{"type":"text","text":" at all. Instead, you can send"},{"text":" ","type":"text"},{"type":"text","text":"actions directly to a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" like so:"}]},{"code":["Button(\"Tap me\") {","  self.store.send(.buttonTapped)","}"],"type":"codeListing","syntax":"swift"},{"level":2,"anchor":"Performance","type":"heading","text":"Performance"},{"type":"paragraph","inlineContent":[{"text":"A common performance pitfall when using the library comes from constructing ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":"s and"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true},{"type":"text","text":"s. When constructed naively, using either view store’s initializer"},{"type":"text","text":" "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","type":"reference"},{"text":" or the SwiftUI helper ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","isActive":true,"type":"reference"},{"text":", it  will observe","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"every change to state in the store:"}]},{"code":["WithViewStore(self.store, observe: { $0 }) { viewStore in","  \/\/ This is executed for every action sent into the system","  \/\/ that causes self.store.state to change.","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"Most of the time this observes far too much state. A typical feature in the Composable","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Architecture holds onto not only the state the view needs to present UI, but also state that the"},{"text":" ","type":"text"},{"type":"text","text":"feature only needs internally, as well as state of child features embedded in the feature."},{"type":"text","text":" "},{"text":"Changes to the internal and child state should not cause the view’s body to re-compute since","type":"text"},{"type":"text","text":" "},{"text":"that state is not needed in the view.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"For example, if the root of our application was a tab view, then we could model that in state","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"as a struct that holds each tab’s state as a property:"}]},{"code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","  }","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"If the view only needs to construct the views for each tab, then no view store is even needed"},{"text":" ","type":"text"},{"type":"text","text":"because we can pass scoped stores to each child feature view:"}]},{"code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    \/\/ No need to observe state changes because the view does","    \/\/ not need access to the state.","    TabView {","      ActivityView(","        store: self.store","          .scope(state: \\.activity, action: \\.activity)","      )","      SearchView(","        store: self.store","          .scope(state: \\.search, action: \\.search)","      )","      ProfileView(","        store: self.store","          .scope(state: \\.profile, action: \\.profile)","      )","    }","  }","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"text":"This means ","type":"text"},{"type":"codeVoice","code":"AppView"},{"type":"text","text":" does not actually need to observe any state changes. This view will only be"},{"type":"text","text":" "},{"type":"text","text":"created a single time, whereas if we observed the store then it would re-compute every time a single"},{"text":" ","type":"text"},{"text":"thing changed in either the activity, search or profile child features.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If sometime in the future we do actually need some state from the store, we can start to observe","type":"text"},{"type":"text","text":" "},{"type":"text","text":"only the bare essentials of state necessary for the view to do its job. For example, suppose that"},{"text":" ","type":"text"},{"text":"we need access to the currently selected tab in state:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["@Reducer","struct AppFeature {","  enum Tab { case activity, search, profile }","  struct State {","    var activity: Activity.State","    var search: Search.State","    var profile: Profile.State","    var selectedTab: Tab","  }","  \/\/ ...","}"]},{"type":"paragraph","inlineContent":[{"text":"Then we can observe this state so that we can construct a binding to ","type":"text"},{"code":"selectedTab","type":"codeVoice"},{"type":"text","text":" for the tab view:"}]},{"syntax":"swift","type":"codeListing","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    WithViewStore(self.store, observe: { $0 }) { viewStore in","      TabView(","        selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) })","      ) {","        ActivityView(","          store: self.store.scope(state: \\.activity, action: \\.activity)","        )","        .tag(AppFeature.Tab.activity)","        SearchView(","          store: self.store.scope(state: \\.search, action: \\.search)","        )","        .tag(AppFeature.Tab.search)","        ProfileView(","          store: self.store.scope(state: \\.profile, action: \\.profile)","        )","        .tag(AppFeature.Tab.profile)","      }","    }","  }","}"]},{"type":"paragraph","inlineContent":[{"text":"However, this style of state observation is terribly inefficient since ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"every","type":"text"}]},{"type":"text","text":" change to"},{"type":"text","text":" "},{"code":"AppFeature.State","type":"codeVoice"},{"type":"text","text":" will cause the view to re-compute even though the only piece of state we"},{"type":"text","text":" "},{"type":"text","text":"actually care about is the "},{"type":"codeVoice","code":"selectedTab"},{"type":"text","text":". The reason we are observing too much state is because"},{"type":"text","text":" "},{"type":"text","text":"we use "},{"type":"codeVoice","code":"observe: { $0 }"},{"text":" in the construction of the ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"reference","isActive":true},{"type":"text","text":", which means the view"},{"type":"text","text":" "},{"type":"text","text":"store will observe all of state."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"To chisel away at the observed state you can provide a closure for that argument that plucks out"},{"type":"text","text":" "},{"text":"the state the view needs. In this case the view only needs a single field:","type":"text"}]},{"type":"codeListing","code":["WithViewStore(self.store, observe: \\.selectedTab) { viewStore in","  TabView(selection: viewStore.binding(send: { .tabSelected($0) }) {","    \/\/ ...","  }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"In the future, the view may need access to more state. For example, suppose "},{"type":"codeVoice","code":"Activity.State"},{"text":" ","type":"text"},{"text":"holds onto an ","type":"text"},{"type":"codeVoice","code":"unreadCount"},{"type":"text","text":" integer to represent how many new activities you have. There’s no"},{"text":" ","type":"text"},{"type":"text","text":"need to observe "},{"type":"emphasis","inlineContent":[{"text":"all","type":"text"}]},{"text":" of ","type":"text"},{"type":"codeVoice","code":"Activity.State"},{"text":" to get access to this one field. You can observe just","type":"text"},{"type":"text","text":" "},{"text":"the one field.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Technically you can do this by mapping your state into a tuple, but because tuples are not"},{"type":"text","text":" "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" you will need to provide an explicit "},{"type":"codeVoice","code":"removeDuplicates"},{"text":" argument:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["WithViewStore(","  self.store,","  observe: { (selectedTab: $0.selectedTab, unreadActivityCount: $0.activity.unreadCount) },","  removeDuplicates: ==",") { viewStore in","  TabView(selection: viewStore.binding(get: \\.selectedTab, send: { .tabSelected($0) }) {","    ActivityView(","      store: self.store.scope(state: \\.activity, action: \\.activity)","    )","    .tag(AppFeature.Tab.activity)","    .badge(\"\\(viewStore.unreadActivityCount)\")","","    \/\/ ...","  }","}"]},{"inlineContent":[{"type":"text","text":"Alternatively, and recommended, you can introduce a lightweight, equatable "},{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" struct"},{"type":"text","text":" "},{"type":"text","text":"nested inside your view whose purpose is to transform the "},{"type":"codeVoice","code":"Store"},{"type":"text","text":"’s full state into the bare"},{"text":" ","type":"text"},{"type":"text","text":"essentials of what the view needs:"}],"type":"paragraph"},{"syntax":"swift","type":"codeListing","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  struct ViewState: Equatable {","    let selectedTab: AppFeature.Tab","    let unreadActivityCount: Int","    init(state: AppFeature.State) {","      self.selectedTab = state.selectedTab","      self.unreadActivityCount = state.activity.unreadCount","    }","  }","","  var body: some View {","    WithViewStore(self.store, observe: ViewState.init) { viewStore in","      TabView {","        ActivityView(","          store: self.store","            .scope(state: \\.activity, action: \\.activity)","        )","        .badge(\"\\(viewStore.unreadActivityCount)\")","","        \/\/ ...","      }","    }","  }","}"]},{"inlineContent":[{"text":"This gives you maximum flexibility in the future for adding new fields to ","type":"text"},{"code":"ViewState","type":"codeVoice"},{"type":"text","text":" without"},{"text":" ","type":"text"},{"text":"making your view convoluted.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"This technique for reducing view re-computations is most effective towards the root of your app","type":"text"},{"text":" ","type":"text"},{"text":"hierarchy and least effective towards the leaf nodes of your app. Root features tend to hold","type":"text"},{"type":"text","text":" "},{"text":"lots of state that its view does not need, such as child features, and leaf features tend to","type":"text"},{"type":"text","text":" "},{"text":"only hold what’s necessary. If you are going to employ this technique you will get the most","type":"text"},{"type":"text","text":" "},{"type":"text","text":"benefit by applying it to views closer to the root. At leaf features and views that need access"},{"type":"text","text":" "},{"text":"to most of the state, it is fine to continue using ","type":"text"},{"code":"observe: { $0 }","type":"codeVoice"},{"text":" to observe all of the state","type":"text"},{"type":"text","text":" "},{"text":"in the store.","type":"text"}]},{"level":2,"text":"Overview","type":"heading","anchor":"Overview"}]}],"sections":[],"metadata":{"platforms":[],"role":"symbol","roleHeading":"Structure","navigatorTitle":[{"text":"WithViewStore","kind":"identifier"}],"symbolKind":"struct","modules":[{"name":"ComposableArchitecture"}],"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"WithViewStore"}],"externalID":"s:22ComposableArchitecture13WithViewStoreV","title":"WithViewStore"},"relationshipsSections":[{"kind":"relationships","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s8SendableP","doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP","doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"],"type":"conformsTo"}],"abstract":[{"type":"text","text":"A view helper that transforms a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"type":"text","text":" into a "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/ForEachStore":{"type":"topic","url":"\/documentation\/composablearchitecture\/foreachstore","kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ForEachStore","kind":"identifier"}],"deprecated":true,"title":"ForEachStore","abstract":[{"type":"text","text":"A Composable Architecture-friendly wrapper around "},{"code":"ForEach","type":"codeVoice"},{"type":"text","text":" that simplifies working with"},{"text":" ","type":"text"},{"type":"text","text":"collections of state."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ForEachStore","navigatorTitle":[{"kind":"identifier","text":"ForEachStore"}],"role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","title":"Deprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationStackStore":{"navigatorTitle":[{"kind":"identifier","text":"NavigationStackStore"}],"url":"\/documentation\/composablearchitecture\/navigationstackstore","type":"topic","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"NavigationStackStore","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationStackStore","title":"NavigationStackStore","kind":"symbol","abstract":[{"type":"text","text":"A navigation stack that is driven by a store."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true,"title":"ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/body":{"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"text":"body","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Content","kind":"typeIdentifier"}],"abstract":[],"deprecated":true,"kind":"symbol","title":"body","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore\/body","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/body"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Performance":{"kind":"article","abstract":[{"type":"text","text":"Learn how to improve the performance of features built in the Composable Architecture."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Performance","title":"Performance","type":"topic","url":"\/documentation\/composablearchitecture\/performance","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/_printChanges(_:)":{"abstract":[{"text":"Prints debug information to the console whenever the view is computed.","type":"text"}],"type":"topic","kind":"symbol","deprecated":true,"title":"_printChanges(_:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/_printChanges(_:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"text":"_printChanges","kind":"identifier"},{"kind":"text","text":"("},{"text":"String","preciseIdentifier":"s:SS","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"WithViewStore","preciseIdentifier":"s:22ComposableArchitecture13WithViewStoreV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ViewAction"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"Content"},{"kind":"text","text":">"}],"role":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore\/_printchanges(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/7SwiftUI4ViewP":{"title":"SwiftUICore.View","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI4ViewP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/IfLetStore":{"role":"symbol","url":"\/documentation\/composablearchitecture\/ifletstore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/IfLetStore","abstract":[{"text":"A view that safely unwraps a store of optional state in order to show one of two views.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"IfLetStore"}],"kind":"symbol","navigatorTitle":[{"text":"IfLetStore","kind":"identifier"}],"title":"IfLetStore","deprecated":true,"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore":{"navigatorTitle":[{"kind":"identifier","text":"WithViewStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore","type":"topic","url":"\/documentation\/composablearchitecture\/withviewstore","deprecated":true,"role":"symbol","kind":"symbol","title":"WithViewStore","abstract":[{"type":"text","text":"A view helper that transforms a "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" into a "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true},{"type":"text","text":" so that its state can be observed"},{"text":" ","type":"text"},{"type":"text","text":"by a view builder."}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"WithViewStore"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/DynamicViewContent-Implementations":{"role":"collectionGroup","url":"\/documentation\/composablearchitecture\/withviewstore\/dynamicviewcontent-implementations","kind":"article","title":"DynamicViewContent Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/DynamicViewContent-Implementations","abstract":[],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/NavigationLinkStore":{"abstract":[{"type":"text","text":"A view that controls a navigation presentation."}],"deprecated":true,"title":"NavigationLinkStore","navigatorTitle":[{"kind":"identifier","text":"NavigationLinkStore"}],"kind":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"NavigationLinkStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/NavigationLinkStore","type":"topic","role":"symbol","url":"\/documentation\/composablearchitecture\/navigationlinkstore"},"doc://ComposableArchitecture/s8CopyableP":{"title":"Swift.Copyable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/CaseLet":{"title":"CaseLet","url":"\/documentation\/composablearchitecture\/caselet","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"CaseLet","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"CaseLet"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet","deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"text":"A view that handles a specific case of enum state in a ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore"},{"type":"text","text":"."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore/init(_:observe:)-3ak1y":{"url":"\/documentation\/composablearchitecture\/viewstore\/init(_:observe:)-3ak1y","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"convenience"},{"kind":"text","text":" "},{"text":"init","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","kind":"typeIdentifier","text":"Store"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">, "},{"text":"observe","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"text":") -> ","kind":"text"},{"text":"ViewState","kind":"typeIdentifier"},{"text":")","kind":"text"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore\/init(_:observe:)-3ak1y","kind":"symbol","title":"init(_:observe:)","role":"symbol","abstract":[{"type":"text","text":"Initializes a view store from a store which observes changes to state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwitchStore":{"type":"topic","title":"SwitchStore","url":"\/documentation\/composablearchitecture\/switchstore","fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"text":"SwitchStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"SwitchStore"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwitchStore","deprecated":true,"role":"symbol","kind":"symbol","abstract":[{"type":"text","text":"A view that observes when enum state held in a store changes cases, and provides stores to"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/CaseLet"},{"type":"text","text":" views."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/init(_:observe:content:file:line:)-8g15l":{"abstract":[{"text":"Initializes a structure that transforms a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" into an observable "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore"},{"text":" in order","type":"text"},{"type":"text","text":" "},{"type":"text","text":"to compute views from state."}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/withviewstore\/init(_:observe:content:file:line:)-8g15l","fragments":[{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"State","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ViewAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"kind":"externalParam","text":"observe"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","text":"State"},{"kind":"text","text":") -> "},{"text":"ViewState","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"content","kind":"externalParam"},{"kind":"text","text":": ("},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture9ViewStoreC","text":"ViewStore"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"ViewState"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ViewAction"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Content"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"text":")","kind":"text"}],"title":"init(_:observe:content:file:line:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/init(_:observe:content:file:line:)-8g15l","type":"topic","role":"symbol","conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"ViewState"},{"type":"text","text":" conforms to "},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Content"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"View"},{"text":".","type":"text"}],"availabilityPrefix":[{"type":"text","text":"Available when"}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/WithViewStore/View-Implementations":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/WithViewStore\/View-Implementations","abstract":[],"title":"View Implementations","url":"\/documentation\/composablearchitecture\/withviewstore\/view-implementations","kind":"article","role":"collectionGroup"},"doc://ComposableArchitecture/7SwiftUI18DynamicViewContentP":{"title":"SwiftUICore.DynamicViewContent","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/7SwiftUI18DynamicViewContentP"},"doc://ComposableArchitecture/s8SendableP":{"title":"Swift.Sendable","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"}}}