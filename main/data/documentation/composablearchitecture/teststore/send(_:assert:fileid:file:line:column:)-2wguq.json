{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore"]]},"variants":[{"paths":["\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-2wguq"],"traits":[{"interfaceLanguage":"swift"}]}],"schemaVersion":{"major":0,"minor":3,"patch":0},"kind":"symbol","abstract":[{"text":"Sends an action to the store and asserts when state changes.","type":"text"}],"sections":[],"metadata":{"conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"code":"Equatable","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"text":"(","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"assert"},{"text":": ((","kind":"text"},{"kind":"keyword","text":"inout"},{"kind":"text","text":" "},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"kind":"text","text":" -> "},{"text":"Void","kind":"typeIdentifier","preciseIdentifier":"s:s4Voida"},{"text":")?, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","text":"TestStoreTask","kind":"typeIdentifier"}],"title":"send(_:assert:fileID:file:line:column:)","extendedModule":"ComposableArchitecture","symbolKind":"method","roleHeading":"Instance Method","role":"symbol","externalID":"s:22ComposableArchitecture9TestStoreC4send_6assert6fileID0G04line6columnAA0cD4TaskVq__yxzKcSgs12StaticStringVANS2utYaF","modules":[{"name":"ComposableArchitecture"}]},"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"kind":"attribute","text":"@discardableResult"},{"kind":"text","text":" "},{"kind":"attribute","text":"@"},{"text":"MainActor","kind":"attribute","preciseIdentifier":"s:ScM"},{"kind":"text","text":" "},{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"text":"_","kind":"externalParam"},{"kind":"text","text":" "},{"kind":"internalParam","text":"action"},{"kind":"text","text":": "},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"assert","kind":"externalParam"},{"text":" ","kind":"text"},{"kind":"internalParam","text":"updateStateToExpectedResult"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"kind":"keyword","text":"throws"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:s4Voida","text":"Void"},{"kind":"text","text":")? = nil, "},{"kind":"externalParam","text":"fileID"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":" = "},{"kind":"keyword","text":"#fileID"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"file"},{"text":" ","kind":"text"},{"text":"filePath","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":" = ","kind":"text"},{"kind":"keyword","text":"#filePath"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":" = ","kind":"text"},{"text":"#line","kind":"keyword"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":" = "},{"text":"#column","kind":"keyword"},{"text":") ","kind":"text"},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","text":"TestStoreTask","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","kind":"typeIdentifier"}],"platforms":["macOS"],"languages":["swift"]}]},{"kind":"parameters","parameters":[{"content":[{"inlineContent":[{"text":"An action.","type":"text"}],"type":"paragraph"}],"name":"action"},{"name":"updateStateToExpectedResult","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"A closure that asserts state changed by sending the action to"},{"type":"text","text":" "},{"type":"text","text":"the store. The mutable state sent to this closure must be modified to match the state of"},{"text":" ","type":"text"},{"text":"the store after processing the given action. Do not provide a closure if no change is","type":"text"},{"type":"text","text":" "},{"type":"text","text":"expected."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The fileID."}]}],"name":"fileID"},{"name":"filePath","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The filePath."}]}]},{"name":"line","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The line."}]}]},{"name":"column","content":[{"type":"paragraph","inlineContent":[{"text":"The column.","type":"text"}]}]}]},{"kind":"content","content":[{"level":2,"text":"Return Value","type":"heading","anchor":"return-value"},{"inlineContent":[{"text":"A ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","isActive":true},{"type":"text","text":" that represents the lifecycle of the effect executed when"},{"type":"text","text":" "},{"type":"text","text":"sending the action."}],"type":"paragraph"}]},{"kind":"content","content":[{"type":"heading","level":2,"anchor":"discussion","text":"Discussion"},{"type":"paragraph","inlineContent":[{"type":"text","text":"To assert on how state changes you can provide a trailing closure, and that closure is handed"},{"type":"text","text":" "},{"type":"text","text":"a mutable variable that represents the feature’s state "},{"inlineContent":[{"type":"text","text":"before"}],"type":"emphasis"},{"text":" the action was sent. You need","type":"text"},{"text":" ","type":"text"},{"text":"to mutate that variable so that it is equal to the feature’s state ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"after","type":"text"}]},{"type":"text","text":" the action is sent:"}]},{"syntax":"swift","code":["await store.send(.incrementButtonTapped) {","  $0.count = 1","}","await store.send(.decrementButtonTapped) {","  $0.count = 0","}"],"type":"codeListing"},{"inlineContent":[{"type":"text","text":"This method suspends in order to allow any effects to start. For example, if you track an"},{"text":" ","type":"text"},{"type":"text","text":"analytics event in an effect when an action is sent, you can assert on that behavior"},{"type":"text","text":" "},{"text":"immediately after awaiting ","type":"text"},{"type":"codeVoice","code":"store.send"},{"type":"text","text":":"}],"type":"paragraph"},{"type":"codeListing","code":["@Test","func analytics() async {","  let events = LockIsolated<[String]>([])","  let analytics = AnalyticsClient(","    track: { event in","      events.withValue { $0.append(event) }","    }","  )","","  let store = TestStore(initialState: Feature.State()) {","    Feature()","  } withDependencies {","    $0.analytics = analytics","  }","","  await store.send(.buttonTapped)","","  events.withValue { XCTAssertEqual($0, [\"Button Tapped\"]) }","}"],"syntax":"swift"},{"inlineContent":[{"type":"text","text":"This method suspends only for the duration until the effect "},{"type":"emphasis","inlineContent":[{"text":"starts","type":"text"}]},{"type":"text","text":" from sending the action."},{"text":" ","type":"text"},{"type":"text","text":"It does "},{"inlineContent":[{"type":"text","text":"not"}],"type":"emphasis"},{"text":" suspend for the duration of the effect.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"In order to suspend for the duration of the effect you can use its return value, a","type":"text"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","type":"reference","isActive":true},{"type":"text","text":", which represents the lifecycle of the effect started from sending an"},{"type":"text","text":" "},{"text":"action. You can use this value to suspend until the effect finishes, or to force the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"cancellation of the effect, which is helpful for effects that are tied to a view’s lifecycle"},{"type":"text","text":" "},{"text":"and not torn down when an action is sent, such as actions sent in SwiftUI’s ","type":"text"},{"code":"task","type":"codeVoice"},{"text":" view","type":"text"},{"type":"text","text":" "},{"text":"modifier.","type":"text"}]},{"inlineContent":[{"type":"text","text":"For example, if your feature kicks off a long-living effect when the view appears by using"},{"text":" ","type":"text"},{"type":"text","text":"SwiftUI’s "},{"type":"codeVoice","code":"task"},{"text":" view modifier, then you can write a test for such a feature by explicitly","type":"text"},{"type":"text","text":" "},{"type":"text","text":"canceling the effect’s task after you make all assertions:"}],"type":"paragraph"},{"code":["let store = TestStore(\/* ... *\/)","","\/\/ Emulate the view appearing","let task = await store.send(.task)","","\/\/ Assertions","","\/\/ Emulate the view disappearing","await task.cancel()"],"type":"codeListing","syntax":"swift"}]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq","interfaceLanguage":"swift"},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore":{"url":"\/documentation\/composablearchitecture\/teststore","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore","role":"symbol","navigatorTitle":[{"text":"TestStore","kind":"identifier"}],"type":"topic","title":"TestStore","abstract":[{"type":"text","text":"A testable runtime for a reducer."}],"kind":"symbol","fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"TestStore","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStore/send(_:assert:fileID:file:line:column:)-2wguq":{"conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":"."}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"url":"\/documentation\/composablearchitecture\/teststore\/send(_:assert:fileid:file:line:column:)-2wguq","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"text":"(","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"kind":"externalParam","text":"assert"},{"kind":"text","text":": (("},{"kind":"keyword","text":"inout"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"State"},{"text":") ","kind":"text"},{"text":"throws","kind":"keyword"},{"text":" -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"kind":"text","text":")?, "},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"file","kind":"externalParam"},{"kind":"text","text":": "},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"line"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"kind":"externalParam","text":"column"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":") "},{"kind":"keyword","text":"async"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture13TestStoreTaskV","text":"TestStoreTask"}],"title":"send(_:assert:fileID:file:line:column:)","role":"symbol","type":"topic","abstract":[{"type":"text","text":"Sends an action to the store and asserts when state changes."}],"kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStore\/send(_:assert:fileID:file:line:column:)-2wguq"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/TestStoreTask":{"abstract":[{"text":"The type returned from ","type":"text"},{"type":"codeVoice","code":"TestStore\/send(_:assert:fileID:file:line:column:)-8f2pl"},{"text":" that represents the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"lifecycle of the effect started from sending an action."}],"fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"TestStoreTask","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/TestStoreTask","title":"TestStoreTask","role":"symbol","url":"\/documentation\/composablearchitecture\/teststoretask","navigatorTitle":[{"text":"TestStoreTask","kind":"identifier"}],"kind":"symbol"}}}