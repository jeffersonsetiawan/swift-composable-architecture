{"sections":[],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"@","kind":"attribute"},{"text":"MainActor","preciseIdentifier":"s:ScM","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@dynamicMemberLookup","kind":"attribute"},{"text":" ","kind":"text"},{"text":"@preconcurrency","kind":"attribute"},{"text":" ","kind":"text"},{"kind":"keyword","text":"final"},{"text":" ","kind":"text"},{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"},{"text":"<","kind":"text"},{"kind":"genericParameter","text":"State"},{"kind":"text","text":", "},{"text":"Action","kind":"genericParameter"},{"text":">","kind":"text"}],"languages":["swift"],"platforms":["macOS"]}]},{"content":[{"text":"Overview","anchor":"overview","type":"heading","level":2},{"inlineContent":[{"type":"text","text":"You will typically construct a single one of these at the root of your application:"}],"type":"paragraph"},{"code":["@main","struct MyApp: App {","  var body: some Scene {","    WindowGroup {","      RootView(","        store: Store(initialState: AppFeature.State()) {","          AppFeature()","        }","      )","    }","  }","}"],"syntax":"swift","type":"codeListing"},{"inlineContent":[{"text":"…and then use the ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"text":" method to derive more focused stores that can be","type":"text"},{"type":"text","text":" "},{"type":"text","text":"passed to subviews."}],"type":"paragraph"},{"anchor":"Scoping","level":3,"type":"heading","text":"Scoping"},{"inlineContent":[{"type":"text","text":"The most important operation defined on "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" is the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"text":" method,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"which allows you to transform a store into one that deals with child state and actions. This is"},{"type":"text","text":" "},{"text":"necessary for passing stores to subviews that only care about a small portion of the entire","type":"text"},{"type":"text","text":" "},{"type":"text","text":"application’s domain."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"text":"For example, if an application has a tab view at its root with tabs for activity, search, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"profile, then we can model the domain like this:"}]},{"code":["@Reducer","struct AppFeature {","  struct State {","    var activity: Activity.State","    var profile: Profile.State","    var search: Search.State","  }","","  enum Action {","    case activity(Activity.Action)","    case profile(Profile.Action)","    case search(Search.Action)","  }","","  \/\/ ...","}"],"type":"codeListing","syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"We can construct a view for each of these domains by applying "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255"},{"type":"text","text":" to"},{"text":" ","type":"text"},{"text":"a store that holds onto the full app domain in order to transform it into a store for each","type":"text"},{"text":" ","type":"text"},{"text":"subdomain:","type":"text"}]},{"syntax":"swift","code":["struct AppView: View {","  let store: StoreOf<AppFeature>","","  var body: some View {","    TabView {","      ActivityView(","        store: store.scope(state: \\.activity, action: \\.activity)","      )","      .tabItem { Text(\"Activity\") }","","      SearchView(","        store: store.scope(state: \\.search, action: \\.search)","      )","      .tabItem { Text(\"Search\") }","","      ProfileView(","        store: store.scope(state: \\.profile, action: \\.profile)","      )","      .tabItem { Text(\"Profile\") }","    }","  }","}"],"type":"codeListing"},{"level":3,"type":"heading","anchor":"Thread-safety","text":"Thread safety"},{"inlineContent":[{"type":"text","text":"The "},{"type":"codeVoice","code":"Store"},{"type":"text","text":" class is not thread-safe, and so all interactions with an instance of "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"(including all of its child stores) must be done on the same thread the store was created on."},{"type":"text","text":" "},{"type":"text","text":"Further, if the store is powering a SwiftUI or UIKit view, as is customary, then all"},{"type":"text","text":" "},{"type":"text","text":"interactions must be done on the "},{"type":"emphasis","inlineContent":[{"text":"main","type":"text"}]},{"type":"text","text":" thread."}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The reason stores are not thread-safe is due to the fact that when an action is sent to a store,"},{"text":" ","type":"text"},{"type":"text","text":"a reducer is run on the current state, and this process cannot be done from multiple threads."},{"type":"text","text":" "},{"text":"It is possible to make this process thread-safe by introducing locks or queues, but this","type":"text"},{"type":"text","text":" "},{"type":"text","text":"introduces new complications:"}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If done simply with "},{"code":"DispatchQueue.main.async","type":"codeVoice"},{"type":"text","text":" you will incur a thread hop even when you are"},{"text":" ","type":"text"},{"type":"text","text":"already on the main thread. This can lead to unexpected behavior in UIKit and SwiftUI, where"},{"text":" ","type":"text"},{"type":"text","text":"sometimes you are required to do work synchronously, such as in animation blocks."}]}]},{"content":[{"inlineContent":[{"text":"It is possible to create a scheduler that performs its work immediately when on the main","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"thread and otherwise uses "},{"code":"DispatchQueue.main.async","type":"codeVoice"},{"type":"text","text":" ("},{"inlineContent":[{"type":"text","text":"e.g."}],"type":"emphasis"},{"type":"text","text":", see Combine Schedulers’"},{"text":" ","type":"text"},{"isActive":true,"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","type":"reference"},{"type":"text","text":")."}],"type":"paragraph"}]}]},{"inlineContent":[{"text":"This introduces a lot more complexity, and should probably not be adopted without having a very","type":"text"},{"text":" ","type":"text"},{"text":"good reason.","type":"text"}],"type":"paragraph"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This is why we require all actions be sent from the same thread. This requirement is in the same"},{"text":" ","type":"text"},{"text":"spirit of how ","type":"text"},{"code":"URLSession","type":"codeVoice"},{"type":"text","text":" and other Apple APIs are designed. Those APIs tend to deliver their"},{"type":"text","text":" "},{"type":"text","text":"outputs on whatever thread is most convenient for them, and then it is your responsibility to"},{"type":"text","text":" "},{"type":"text","text":"dispatch back to the main queue if that’s what you need. The Composable Architecture makes you"},{"text":" ","type":"text"},{"type":"text","text":"responsible for making sure to send actions on the main thread. If you are using an effect that"},{"type":"text","text":" "},{"text":"may deliver its output on a non-main thread, you must explicitly perform ","type":"text"},{"code":".receive(on:)","type":"codeVoice"},{"type":"text","text":" in"},{"type":"text","text":" "},{"type":"text","text":"order to force it back on the main thread."}]},{"inlineContent":[{"type":"text","text":"This approach makes the fewest number of assumptions about how effects are created and"},{"text":" ","type":"text"},{"type":"text","text":"transformed, and prevents unnecessary thread hops and re-dispatching. It also provides some"},{"type":"text","text":" "},{"type":"text","text":"testing benefits. If your effects are not responsible for their own scheduling, then in tests"},{"type":"text","text":" "},{"type":"text","text":"all of the effects would run synchronously and immediately. You would not be able to test how"},{"text":" ","type":"text"},{"text":"multiple in-flight effects interleave with each other and affect the state of your application.","type":"text"},{"type":"text","text":" "},{"text":"However, by leaving scheduling out of the ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true},{"text":" we get to test these aspects of our effects","type":"text"},{"type":"text","text":" "},{"text":"if we so desire, or we can ignore if we prefer. We have that flexibility.","type":"text"}],"type":"paragraph"},{"level":4,"text":"Thread safety checks","anchor":"Thread-safety-checks","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"The store performs some basic thread safety checks in order to help catch mistakes. Stores"},{"text":" ","type":"text"},{"type":"text","text":"constructed via the initializer "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","type":"reference","isActive":true},{"type":"text","text":" are assumed"},{"type":"text","text":" "},{"text":"to run only on the main thread, and so a check is executed immediately to make sure that is the","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"case. Further, all actions sent to the store and all scopes (see "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","isActive":true},{"type":"text","text":")"},{"text":" ","type":"text"},{"text":"of the store are also checked to make sure that work is performed on the main thread.","type":"text"}]}],"kind":"content"}],"metadata":{"fragments":[{"kind":"keyword","text":"class"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Store"}],"navigatorTitle":[{"text":"Store","kind":"identifier"}],"externalID":"s:22ComposableArchitecture5StoreC","roleHeading":"Class","role":"symbol","title":"Store","symbolKind":"class","modules":[{"name":"ComposableArchitecture"}]},"kind":"symbol","hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture"]]},"abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"around to views that need to interact with the application."}],"variants":[{"paths":["\/documentation\/composablearchitecture\/store"],"traits":[{"interfaceLanguage":"swift"}]}],"topicSections":[{"title":"Creating a store","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf"],"anchor":"Creating-a-store"},{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)"],"anchor":"Accessing-state","title":"Accessing state"},{"anchor":"Sending-actions","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask"],"title":"Sending actions"},{"title":"Scoping stores","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case"],"anchor":"Scoping-stores"},{"anchor":"Combine-integration","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher"],"title":"Combine integration"},{"title":"Deprecated interfaces","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations"],"anchor":"Deprecated-interfaces"},{"anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations"],"title":"Default Implementations","generated":true}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState"],"generated":true,"anchor":"State-management","title":"State management"}],"schemaVersion":{"minor":3,"patch":0,"major":0},"relationshipsSections":[{"kind":"relationships","type":"conformsTo","title":"Conforms To","identifiers":["doc:\/\/ComposableArchitecture\/11Observation10ObservableP","doc:\/\/ComposableArchitecture\/14PerceptionCore11PerceptibleP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s12IdentifiableP","doc:\/\/ComposableArchitecture\/s8SendableP"]}],"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Equatable-Implementations":{"type":"topic","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/store\/equatable-implementations","role":"collectionGroup","title":"Equatable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Equatable-Implementations"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/subscript(dynamicMember:)-655ef":{"url":"\/documentation\/composablearchitecture\/store\/subscript(dynamicmember:)-655ef","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/subscript(dynamicMember:)-655ef","abstract":[],"kind":"symbol","fragments":[{"text":"subscript","kind":"keyword"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">(","kind":"text"},{"text":"dynamicMember","kind":"externalParam"},{"kind":"text","text":" _: "},{"preciseIdentifier":"s:s7KeyPathC","kind":"typeIdentifier","text":"KeyPath"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"Value"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","text":"Value"}],"title":"subscript(dynamicMember:)","conformance":{"availabilityPrefix":[{"type":"text","text":"Available when"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/init(initialState:reducer:withDependencies:)":{"abstract":[{"type":"text","text":"Initializes a store from an initial state and a reducer."}],"kind":"symbol","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/init(initialstate:reducer:withdependencies:)","title":"init(initialState:reducer:withDependencies:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/init(initialState:reducer:withDependencies:)","type":"topic","fragments":[{"text":"convenience","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"init"},{"text":"<","kind":"text"},{"text":"R","kind":"genericParameter"},{"kind":"text","text":">("},{"text":"initialState","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"@autoclosure ","kind":"attribute"},{"text":"() -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"kind":"text","text":"."},{"preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa","kind":"typeIdentifier","text":"State"},{"kind":"text","text":", "},{"text":"reducer","kind":"externalParam"},{"text":": () -> ","kind":"text"},{"text":"R","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"withDependencies","kind":"externalParam"},{"kind":"text","text":": (("},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:12Dependencies16DependencyValuesV","text":"DependencyValues","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:s4Voida","text":"Void","kind":"typeIdentifier"},{"text":")?)","kind":"text"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-2ym6k":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-2ym6k","abstract":[{"type":"text","text":"Scopes the store of an identified collection to a collection of stores."}],"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}]},"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"kind":"text","text":"<"},{"text":"ElementID","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ElementState","kind":"genericParameter"},{"text":", ","kind":"text"},{"kind":"genericParameter","text":"ElementAction"},{"text":">(","kind":"text"},{"text":"state","kind":"externalParam"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"text":"State","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"preciseIdentifier":"s:21IdentifiedCollections0A5ArrayV","text":"IdentifiedArray","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ElementID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"IdentifiedAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16IdentifiedActionO"},{"text":"<","kind":"text"},{"text":"ElementID","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","text":"StaticString","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"filePath"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"kind":"externalParam","text":"line"},{"kind":"text","text":": "},{"text":"UInt","kind":"typeIdentifier","preciseIdentifier":"s:Su"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"preciseIdentifier":"s:Sk","text":"RandomAccessCollection","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Store","preciseIdentifier":"s:22ComposableArchitecture5StoreC"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ElementState"},{"text":", ","kind":"text"},{"text":"ElementAction","kind":"typeIdentifier"},{"kind":"text","text":">>\n"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-2ym6k","title":"scope(state:action:fileID:filePath:line:column:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Hashable-Implementations":{"kind":"article","abstract":[],"title":"Hashable Implementations","url":"\/documentation\/composablearchitecture\/store\/hashable-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Hashable-Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/state-1qxwl":{"abstract":[{"text":"Direct access to state in the store when ","type":"text"},{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","isActive":true,"type":"reference"},{"text":".","type":"text"}],"kind":"symbol","conformance":{"constraints":[{"code":"State","type":"codeVoice"},{"type":"text","text":" conforms to "},{"code":"ObservableState","type":"codeVoice"},{"type":"text","text":"."}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"type":"text","text":"Conforms when"}]},"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"text":"state","kind":"identifier"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/state-1qxwl","url":"\/documentation\/composablearchitecture\/store\/state-1qxwl","type":"topic","role":"symbol","title":"state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Effect":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","title":"Effect","role":"symbol","abstract":[],"type":"topic","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"kind":"identifier","text":"Effect"}],"navigatorTitle":[{"text":"Effect","kind":"identifier"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/effect"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreOf":{"navigatorTitle":[{"kind":"identifier","text":"StoreOf"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreOf","type":"topic","title":"StoreOf","abstract":[{"text":"A convenience type alias for referring to a store of a given reducer’s domain.","type":"text"}],"kind":"symbol","role":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"text":" ","kind":"text"},{"text":"StoreOf","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/storeof"},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"title":"Swift.CustomDebugStringConvertible","type":"unresolvable","identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP"},"https://github.com/pointfreeco/combine-schedulers/blob/main/Sources/CombineSchedulers/UIScheduler.swift":{"type":"link","url":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift","title":"UIScheduler","titleInlineContent":[{"type":"text","text":"UIScheduler"}],"identifier":"https:\/\/github.com\/pointfreeco\/combine-schedulers\/blob\/main\/Sources\/CombineSchedulers\/UIScheduler.swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:)":{"abstract":[{"text":"Sends an action to the store.","type":"text"}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","title":"send(_:)","role":"symbol","url":"\/documentation\/composablearchitecture\/store\/send(_:)","kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/case":{"url":"\/documentation\/composablearchitecture\/store\/case","abstract":[{"type":"text","text":"A destructurable view of a store on a collection of cases."}],"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"conformancePrefix":[{"text":"Conforms when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"text":" conforms to ","type":"text"},{"type":"codeVoice","code":"CaseReducerState"},{"type":"text","text":" and "},{"code":"Action","type":"codeVoice"},{"type":"text","text":" is "},{"type":"codeVoice","code":"State.StateReducer.Action"},{"type":"text","text":"."}]},"fragments":[{"kind":"keyword","text":"var"},{"text":" ","kind":"text"},{"kind":"identifier","text":"`case`"},{"text":": ","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture16CaseReducerStateP0eD0Qa","text":"StateReducer"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"CaseScope","preciseIdentifier":"s:22ComposableArchitecture11CaseReducerP0C5ScopeQa"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/case","title":"case"},"doc://ComposableArchitecture/11Observation10ObservableP":{"type":"unresolvable","title":"Observation.Observable","identifier":"doc:\/\/ComposableArchitecture\/11Observation10ObservableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/withState(_:)":{"url":"\/documentation\/composablearchitecture\/store\/withstate(_:)","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/withState(_:)","abstract":[{"text":"Calls the given closure with a snapshot of the current state of the store.","type":"text"}],"kind":"symbol","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"withState","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"R"},{"text":">((","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"R"}],"title":"withState(_:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:)-90255":{"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:)-90255","abstract":[{"type":"text","text":"Scopes the store to one that exposes child state and actions."}],"fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"scope","kind":"identifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"genericParameter"},{"text":">(","kind":"text"},{"kind":"externalParam","text":"state"},{"kind":"text","text":": "},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"State"},{"text":", ","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":">, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"text":"CaseKeyPath","kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha"},{"text":"<","kind":"text"},{"text":"Action","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">) -> "},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store"},{"text":"<","kind":"text"},{"kind":"typeIdentifier","text":"ChildState"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">","kind":"text"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:)-90255","title":"scope(state:action:)"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreDeprecations":{"kind":"article","abstract":[{"type":"text","text":"Review unsupported store APIs and their replacements."}],"title":"Deprecations","url":"\/documentation\/composablearchitecture\/storedeprecations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreDeprecations","type":"topic"},"doc://ComposableArchitecture/s8CopyableP":{"type":"unresolvable","title":"Swift.Copyable","identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/CustomDebugStringConvertible-Implementations":{"kind":"article","abstract":[],"title":"CustomDebugStringConvertible Implementations","url":"\/documentation\/composablearchitecture\/store\/customdebugstringconvertible-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/CustomDebugStringConvertible-Implementations","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"url":"\/documentation\/composablearchitecture\/sharingstate","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"type":"text","text":" "},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","title":"Sharing state"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/Identifiable-Implementations":{"title":"Identifiable Implementations","type":"topic","url":"\/documentation\/composablearchitecture\/store\/identifiable-implementations","kind":"article","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/Identifiable-Implementations","abstract":[]},"doc://ComposableArchitecture/s12IdentifiableP":{"type":"unresolvable","title":"Swift.Identifiable","identifier":"doc:\/\/ComposableArchitecture\/s12IdentifiableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/scope(state:action:fileID:filePath:line:column:)-3yvuf":{"abstract":[{"text":"Scopes the store to optional child state and actions.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/scope(state:action:fileID:filePath:line:column:)-3yvuf","kind":"symbol","type":"topic","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"kind":"identifier","text":"scope"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"genericParameter"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"genericParameter"},{"kind":"text","text":">("},{"kind":"externalParam","text":"state"},{"text":": ","kind":"text"},{"text":"KeyPath","kind":"typeIdentifier","preciseIdentifier":"s:s7KeyPathC"},{"text":"<","kind":"text"},{"text":"State","kind":"typeIdentifier"},{"kind":"text","text":", "},{"kind":"typeIdentifier","text":"ChildState"},{"text":"?>, ","kind":"text"},{"kind":"externalParam","text":"action"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Action"},{"kind":"text","text":", "},{"text":"ChildAction","kind":"typeIdentifier"},{"kind":"text","text":">, "},{"text":"fileID","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"kind":"text","text":", "},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:Su","text":"UInt"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture5StoreC","text":"Store","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"ChildState","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"ChildAction","kind":"typeIdentifier"},{"text":">?","kind":"text"}],"url":"\/documentation\/composablearchitecture\/store\/scope(state:action:fileid:filepath:line:column:)-3yvuf","title":"scope(state:action:fileID:filePath:line:column:)","role":"symbol","conformance":{"conformancePrefix":[{"text":"Conforms when","type":"text"}],"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"type":"codeVoice","code":"State"},{"type":"text","text":" conforms to "},{"type":"codeVoice","code":"ObservableState"},{"type":"text","text":"."}]}},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer","title":"Reducer","role":"symbol","abstract":[{"text":"A protocol that describes how to evolve the current state of an application to the next state,","type":"text"},{"text":" ","type":"text"},{"text":"given an action, and describes what ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Effect","type":"reference"},{"type":"text","text":"s should be executed later by the store, if any."}],"type":"topic","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Reducer"}],"navigatorTitle":[{"kind":"identifier","text":"Reducer"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/reducer"},"doc://ComposableArchitecture/14PerceptionCore11PerceptibleP":{"type":"unresolvable","title":"PerceptionCore.Perceptible","identifier":"doc:\/\/ComposableArchitecture\/14PerceptionCore11PerceptibleP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:animation:)":{"kind":"symbol","title":"send(_:animation:)","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:animation:)","fragments":[{"kind":"keyword","text":"func"},{"text":" ","kind":"text"},{"kind":"identifier","text":"send"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":", ","kind":"text"},{"text":"animation","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI9AnimationV","text":"Animation","kind":"typeIdentifier"},{"text":"?) -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","text":"StoreTask","kind":"typeIdentifier"}],"url":"\/documentation\/composablearchitecture\/store\/send(_:animation:)","abstract":[{"type":"text","text":"Sends an action to the store with a given animation."}],"type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StoreTask":{"url":"\/documentation\/composablearchitecture\/storetask","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StoreTask","role":"symbol","navigatorTitle":[{"text":"StoreTask","kind":"identifier"}],"type":"topic","title":"StoreTask","abstract":[{"text":"The type returned from ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:)","type":"reference"},{"type":"text","text":" that represents the lifecycle of the effect"},{"type":"text","text":" "},{"type":"text","text":"started from sending an action."}],"kind":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StoreTask"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/StorePublisher":{"title":"StorePublisher","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"StorePublisher"}],"navigatorTitle":[{"text":"StorePublisher","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/StorePublisher","role":"symbol","url":"\/documentation\/composablearchitecture\/storepublisher","abstract":[{"text":"A publisher of store state.","type":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ObservableState":{"kind":"symbol","abstract":[],"fragments":[{"kind":"keyword","text":"protocol"},{"text":" ","kind":"text"},{"kind":"identifier","text":"ObservableState"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ObservableState","title":"ObservableState","navigatorTitle":[{"kind":"identifier","text":"ObservableState"}],"type":"topic","url":"\/documentation\/composablearchitecture\/observablestate","role":"symbol"},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store/send(_:transaction:)":{"url":"\/documentation\/composablearchitecture\/store\/send(_:transaction:)","abstract":[{"type":"text","text":"Sends an action to the store with a given transaction."}],"fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"send","kind":"identifier"},{"kind":"text","text":"("},{"text":"Action","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"kind":"externalParam","text":"transaction"},{"kind":"text","text":": "},{"preciseIdentifier":"s:7SwiftUI11TransactionV","kind":"typeIdentifier","text":"Transaction"},{"text":") -> ","kind":"text"},{"preciseIdentifier":"s:22ComposableArchitecture9StoreTaskV","kind":"typeIdentifier","text":"StoreTask"}],"kind":"symbol","type":"topic","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store\/send(_:transaction:)","title":"send(_:transaction:)"}}}