{"hierarchy":{"paths":[["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations"]]},"primaryContentSections":[{"kind":"declarations","declarations":[{"platforms":["macOS"],"languages":["swift"],"tokens":[{"kind":"attribute","text":"@propertyWrapper"},{"kind":"text","text":" "},{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"text":"BindingState","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"genericParameter"},{"text":">","kind":"text"}]}]},{"content":[{"level":2,"type":"heading","text":"Overview","anchor":"overview"},{"inlineContent":[{"type":"text","text":"Along with an action type that conforms to the "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","isActive":true},{"text":" protocol, this type can be","type":"text"},{"type":"text","text":" "},{"text":"used to safely eliminate the boilerplate that is typically incurred when working with multiple","type":"text"},{"type":"text","text":" "},{"text":"mutable fields on state.","type":"text"}],"type":"paragraph"},{"style":"note","name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"It is not necessary to annotate "},{"type":"emphasis","inlineContent":[{"type":"text","text":"every"}]},{"type":"text","text":" field with "},{"code":"@BindingState","type":"codeVoice"},{"type":"text","text":", and in fact it is"},{"type":"text","text":" "},{"text":"not recommended. Marking a field with the property wrapper makes it instantly mutable from the","type":"text"},{"type":"text","text":" "},{"text":"outside, which may hurt the encapsulation of your feature. It is best to limit the usage of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"the property wrapper to only those fields that need to have bindings derived for handing to"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI components."}]}],"type":"aside"},{"type":"paragraph","inlineContent":[{"text":"Read ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true,"type":"reference"},{"type":"text","text":" for more information."}]}],"kind":"content"}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","interfaceLanguage":"swift"},"seeAlsoSections":[{"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore"],"generated":true,"title":"Bindings","anchor":"Bindings"}],"variants":[{"paths":["\/documentation\/composablearchitecture\/bindingstate"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"platforms":[],"roleHeading":"Structure","role":"symbol","navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"title":"BindingState","externalID":"s:22ComposableArchitecture12BindingStateV","modules":[{"name":"ComposableArchitecture"}],"symbolKind":"struct","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"BindingState"}]},"topicSections":[{"title":"Initializers","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)"],"anchor":"Initializers","generated":true},{"anchor":"Instance-Properties","title":"Instance Properties","generated":true,"identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue"]},{"generated":true,"title":"Default Implementations","anchor":"Default-Implementations","identifiers":["doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations"]}],"deprecationSummary":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Deriving bindings directly from stores using '@ObservableState'. See the following migration guide for more information: https:\/\/pointfreeco.github.io\/swift-composable-architecture\/main\/documentation\/composablearchitecture\/migratingto1.7#BindingState"}]}],"relationshipsSections":[{"kind":"relationships","type":"conformsTo","identifiers":["doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP","doc:\/\/ComposableArchitecture\/s8CopyableP","doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","doc:\/\/ComposableArchitecture\/s17CustomReflectableP","doc:\/\/ComposableArchitecture\/Se","doc:\/\/ComposableArchitecture\/SE","doc:\/\/ComposableArchitecture\/SQ","doc:\/\/ComposableArchitecture\/SH","doc:\/\/ComposableArchitecture\/s8SendableP"],"title":"Conforms To"}],"abstract":[{"text":"A property wrapper type that can designate properties of app state that can be directly bindable","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"kind":"symbol","sections":[],"schemaVersion":{"patch":0,"minor":3,"major":0},"references":{"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIDeprecations":{"role":"collectionGroup","title":"Deprecations","url":"\/documentation\/composablearchitecture\/swiftuideprecations","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIDeprecations","kind":"article","abstract":[{"type":"text","text":"Review unsupported SwiftUI APIs and their replacements."}]},"doc://ComposableArchitecture/SH":{"type":"unresolvable","title":"Swift.Hashable","identifier":"doc:\/\/ComposableArchitecture\/SH"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SwiftUIIntegration":{"abstract":[{"type":"text","text":"Integrating the Composable Architecture into a SwiftUI application."}],"title":"SwiftUI Integration","kind":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SwiftUIIntegration","type":"topic","role":"collectionGroup","url":"\/documentation\/composablearchitecture\/swiftuiintegration"},"doc://ComposableArchitecture/documentation/ComposableArchitecture":{"type":"topic","url":"\/documentation\/composablearchitecture","kind":"symbol","title":"ComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a consistent"},{"type":"text","text":" "},{"text":"and understandable way, with composition, testing, and ergonomics in mind. It can be used in","type":"text"},{"type":"text","text":" "},{"type":"text","text":"SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture","role":"collection"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Encodable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Encodable-Implementations","role":"collectionGroup","title":"Encodable Implementations","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/encodable-implementations","abstract":[]},"doc://ComposableArchitecture/s8SendableP":{"type":"unresolvable","title":"Swift.Sendable","identifier":"doc:\/\/ComposableArchitecture\/s8SendableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDumpRepresentable-Implementations":{"type":"topic","title":"CustomDumpRepresentable Implementations","abstract":[],"kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/customdumprepresentable-implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDumpRepresentable-Implementations","role":"collectionGroup"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/wrappedValue":{"fragments":[{"text":"var","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrappedValue","kind":"identifier"},{"kind":"text","text":": "},{"text":"Value","kind":"typeIdentifier"}],"deprecated":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/wrappedValue","role":"symbol","title":"wrappedValue","type":"topic","kind":"symbol","url":"\/documentation\/composablearchitecture\/bindingstate\/wrappedvalue","abstract":[{"type":"text","text":"The underlying value wrapped by the binding state."}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomDebugStringConvertible-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingstate\/customdebugstringconvertible-implementations","title":"CustomDebugStringConvertible Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomDebugStringConvertible-Implementations","role":"collectionGroup","type":"topic","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Hashable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Hashable-Implementations","role":"collectionGroup","title":"Hashable Implementations","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/hashable-implementations","abstract":[]},"doc://ComposableArchitecture/SE":{"type":"unresolvable","title":"Swift.Encodable","identifier":"doc:\/\/ComposableArchitecture\/SE"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/init(wrappedValue:fileID:filePath:line:column:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/init(wrappedValue:fileID:filePath:line:column:)","url":"\/documentation\/composablearchitecture\/bindingstate\/init(wrappedvalue:fileid:filepath:line:column:)","title":"init(wrappedValue:fileID:filePath:line:column:)","role":"symbol","deprecated":true,"abstract":[{"type":"text","text":"Creates bindable state from the value of another bindable state."}],"type":"topic","fragments":[{"text":"init","kind":"identifier"},{"kind":"text","text":"("},{"text":"wrappedValue","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"Value"},{"text":", ","kind":"text"},{"text":"fileID","kind":"externalParam"},{"kind":"text","text":": "},{"preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier","text":"StaticString"},{"kind":"text","text":", "},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","text":"UInt","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":")","kind":"text"}],"kind":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingAction":{"navigatorTitle":[{"kind":"identifier","text":"BindingAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","type":"topic","url":"\/documentation\/composablearchitecture\/bindingaction","role":"symbol","kind":"symbol","title":"BindingAction","abstract":[{"text":"An action that describes simple mutations to some root state at a writable key path.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingAction"}]},"doc://ComposableArchitecture/SQ":{"type":"unresolvable","title":"Swift.Equatable","identifier":"doc:\/\/ComposableArchitecture\/SQ"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/projectedValue":{"role":"symbol","deprecated":true,"fragments":[{"kind":"keyword","text":"var"},{"kind":"text","text":" "},{"kind":"identifier","text":"projectedValue"},{"text":": ","kind":"text"},{"text":"BindingState","preciseIdentifier":"s:22ComposableArchitecture12BindingStateV","kind":"typeIdentifier"},{"text":"<","kind":"text"},{"text":"Value","kind":"typeIdentifier"},{"text":">","kind":"text"}],"title":"projectedValue","kind":"symbol","abstract":[{"type":"text","text":"A projection that can be used to derive bindings from a view store."}],"url":"\/documentation\/composablearchitecture\/bindingstate\/projectedvalue","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/projectedValue","type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewStore":{"navigatorTitle":[{"kind":"identifier","text":"BindingViewStore"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewStore","url":"\/documentation\/composablearchitecture\/bindingviewstore","role":"symbol","kind":"symbol","abstract":[{"text":"A property wrapper type that can derive ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","type":"reference"},{"text":" values for a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","isActive":true,"type":"reference"},{"type":"text","text":"."}],"title":"BindingViewStore","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"BindingViewStore"}]},"doc://ComposableArchitecture/10CustomDump0aB13RepresentableP":{"type":"unresolvable","title":"CustomDump.CustomDumpRepresentable","identifier":"doc:\/\/ComposableArchitecture\/10CustomDump0aB13RepresentableP"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Decodable-Implementations":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Decodable-Implementations","role":"collectionGroup","title":"Decodable Implementations","type":"topic","kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/decodable-implementations","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/ViewStore":{"type":"topic","abstract":[{"text":"A ","type":"text"},{"type":"codeVoice","code":"ViewStore"},{"text":" is an object that can observe state changes and send actions. They are most","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"commonly used in views, such as SwiftUI views, UIView or UIViewController, but they can be used"},{"text":" ","type":"text"},{"type":"text","text":"anywhere it makes sense to observe state or send actions."}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/ViewStore","deprecated":true,"title":"ViewStore","url":"\/documentation\/composablearchitecture\/viewstore","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ViewStore","kind":"identifier"}],"navigatorTitle":[{"kind":"identifier","text":"ViewStore"}],"kind":"symbol","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"title":"Working with SwiftUI bindings","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","url":"\/documentation\/composablearchitecture\/bindings","role":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingViewState":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingViewState","navigatorTitle":[{"text":"BindingViewState","kind":"identifier"}],"type":"topic","url":"\/documentation\/composablearchitecture\/bindingviewstate","abstract":[{"text":"A property wrapper type that can designate properties of view state that can be directly","type":"text"},{"type":"text","text":" "},{"text":"bindable in SwiftUI views.","type":"text"}],"title":"BindingViewState","kind":"symbol","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingViewState","kind":"identifier"}]},"doc://ComposableArchitecture/s28CustomDebugStringConvertibleP":{"identifier":"doc:\/\/ComposableArchitecture\/s28CustomDebugStringConvertibleP","title":"Swift.CustomDebugStringConvertible","type":"unresolvable"},"doc://ComposableArchitecture/s17CustomReflectableP":{"identifier":"doc:\/\/ComposableArchitecture\/s17CustomReflectableP","title":"Swift.CustomReflectable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/Equatable-Implementations":{"kind":"article","url":"\/documentation\/composablearchitecture\/bindingstate\/equatable-implementations","role":"collectionGroup","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/Equatable-Implementations","title":"Equatable Implementations","type":"topic","abstract":[]},"doc://ComposableArchitecture/Se":{"identifier":"doc:\/\/ComposableArchitecture\/Se","title":"Swift.Decodable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindingState","kind":"identifier"}],"abstract":[{"type":"text","text":"A property wrapper type that can designate properties of app state that can be directly bindable"},{"text":" ","type":"text"},{"type":"text","text":"in SwiftUI views."}],"navigatorTitle":[{"text":"BindingState","kind":"identifier"}],"title":"BindingState","deprecated":true,"url":"\/documentation\/composablearchitecture\/bindingstate","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState","type":"topic","role":"symbol"},"doc://ComposableArchitecture/s8CopyableP":{"identifier":"doc:\/\/ComposableArchitecture\/s8CopyableP","title":"Swift.Copyable","type":"unresolvable"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindingState/CustomReflectable-Implementations":{"url":"\/documentation\/composablearchitecture\/bindingstate\/customreflectable-implementations","title":"CustomReflectable Implementations","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingState\/CustomReflectable-Implementations","role":"collectionGroup","type":"topic","kind":"article","abstract":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/BindableAction":{"title":"BindableAction","navigatorTitle":[{"kind":"identifier","text":"BindableAction"}],"kind":"symbol","url":"\/documentation\/composablearchitecture\/bindableaction","fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"BindableAction","kind":"identifier"}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindableAction","role":"symbol","abstract":[{"type":"text","text":"An action type that exposes a "},{"type":"codeVoice","code":"binding"},{"text":" case that holds a ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/BindingAction","isActive":true},{"type":"text","text":"."}]}}}