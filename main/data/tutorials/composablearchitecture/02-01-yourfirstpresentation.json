{"kind":"project","sections":[{"title":"Your first presentation","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}]}],"estimatedTimeInMinutes":30,"chapter":"Navigation","kind":"hero"},{"kind":"tasks","tasks":[{"title":"Project set up","anchor":"Project-set-up","contentSection":[{"content":[{"inlineContent":[{"text":"Suppose that you are working on an application that shows a list of contacts at the root, and","type":"text"},{"type":"text","text":" "},{"type":"text","text":"you want to add the ability to create a new contact. This should be done by tapping a “+” icon"},{"type":"text","text":" "},{"type":"text","text":"in the UI, a sheet will be presented where you can enter the contact’s info, and then tapping"},{"type":"text","text":" "},{"type":"text","text":"a button will dismiss the sheet and add the contact to the list."}],"type":"paragraph"}],"kind":"contentAndMedia","mediaPosition":"trailing","media":"ch02-sub01-sec01-image-0001.png"}],"stepsSection":[{"runtimePreview":null,"caption":[{"name":"Note","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We conform "},{"type":"codeVoice","code":"State"},{"type":"text","text":" to the "},{"type":"codeVoice","code":"Equatable"},{"type":"text","text":" protocol in order to test this feature later."}]}],"type":"aside","style":"note"}],"code":"02-01-01-code-0000.swift","content":[{"inlineContent":[{"text":"We will start by creating a new file, ContactsFeature.swift, and we will get the very basics","type":"text"},{"type":"text","text":" "},{"type":"text","text":"of our contacts feature in this file. Currently that consists of a simple "},{"code":"Contact","type":"codeVoice"},{"type":"text","text":" model"},{"type":"text","text":" "},{"text":"data type, and a simple reducer with a collection of contacts, and a single action for when","type":"text"},{"type":"text","text":" "},{"type":"text","text":"the “+” button is tapped. Currently that action is not yet implemented."}],"type":"paragraph"}],"type":"step","media":null},{"content":[{"inlineContent":[{"text":"Add a view that holds onto a ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","isActive":true,"type":"reference"},{"type":"text","text":" of the "},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" "},{"text":"and observes the store in order to show a list of contacts and send actions.","type":"text"}],"type":"paragraph"}],"code":"02-01-01-code-0001.swift","runtimePreview":null,"caption":[],"type":"step","media":null},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview with a few stubbed contacts already in the state so that we can see what"},{"type":"text","text":" "},{"type":"text","text":"the feature looks like."}]}],"caption":[],"media":null,"runtimePreview":"ch02-sub01-sec01-image-0001.png","code":"02-01-01-code-0002.swift","type":"step"},{"caption":[{"style":"note","content":[{"type":"paragraph","inlineContent":[{"text":"There is nothing to do in the ","type":"text"},{"code":"cancelButtonTapped","type":"codeVoice"},{"text":" and ","type":"text"},{"type":"codeVoice","code":"saveButtonTapped"},{"type":"text","text":" actions"},{"type":"text","text":" "},{"text":"right now. They will be implemented later.","type":"text"}]}],"name":"Note","type":"aside"}],"code":"02-01-01-code-0003.swift","content":[{"type":"paragraph","inlineContent":[{"text":"Create a new file, AddContactFeature.swift, that will hold the reducer and view for the","type":"text"},{"type":"text","text":" "},{"text":"feature that allows us to enter the name of a new contact. The feature will have a “Cancel”","type":"text"},{"text":" ","type":"text"},{"text":"button for dismissing, and a “Save” button that when tapped should dismiss the feature","type":"text"},{"type":"text","text":" "},{"type":"emphasis","inlineContent":[{"type":"text","text":"and"}]},{"type":"text","text":" add the contact to the list of contacts in the parent."}]}],"type":"step","runtimePreview":null,"media":null},{"caption":[{"style":"note","name":"Note","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"If you are targeting older platforms and do not have access to "},{"code":"@Bindable","type":"codeVoice"},{"type":"text","text":", you can"},{"type":"text","text":" "},{"text":"instead use ","type":"text"},{"type":"codeVoice","code":"@Perception.Bindable"},{"text":", which comes with the library.","type":"text"}]}]}],"media":null,"runtimePreview":null,"code":"02-01-01-code-0004.swift","type":"step","content":[{"type":"paragraph","inlineContent":[{"text":"Add a view that holds onto a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store"},{"type":"text","text":" of the "},{"code":"AddContactFeature","type":"codeVoice"},{"text":".","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"Since our view is going to have a text field, we will need to be able to derive bindings"},{"type":"text","text":" "},{"text":"from the store. To do this we use the ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"type":"text","text":" property wrapper from SwiftUI."}]}]},{"caption":[{"type":"aside","content":[{"type":"paragraph","inlineContent":[{"text":"See ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","isActive":true},{"type":"text","text":" for more information on using bindings in the Composable"},{"text":" ","type":"text"},{"type":"text","text":"Architecture."}]}],"name":"Note","style":"note"}],"content":[{"type":"paragraph","inlineContent":[{"text":"Add a form to the view with a text field for editing the name of the contact. We can","type":"text"},{"text":" ","type":"text"},{"text":"use the dynamic member lookup on ","type":"text"},{"type":"codeVoice","code":"$store"},{"type":"text","text":" to describe what piece of state you want to"},{"text":" ","type":"text"},{"type":"text","text":"drive the binding, and then you can use the "},{"type":"codeVoice","code":"sending"},{"text":" method to describe which action","type":"text"},{"text":" ","type":"text"},{"text":"you want to send when the binding is written to.","type":"text"}]}],"type":"step","code":"02-01-01-code-0005.swift","runtimePreview":null,"media":null},{"code":"02-01-01-code-0006.swift","runtimePreview":null,"type":"step","caption":[],"media":null,"content":[{"inlineContent":[{"type":"text","text":"Add a “Save” and “Cancel” button to the view and send the corresponding actions when those"},{"type":"text","text":" "},{"text":"buttons are tapped.","type":"text"}],"type":"paragraph"}]},{"type":"step","code":"02-01-01-code-0007.swift","caption":[],"media":null,"runtimePreview":"ch02-sub01-sec01-image-0002.png","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Add a preview so that we can see what the feature looks like."}]}]}]},{"title":"Integrate reducers","stepsSection":[{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We will start by integrating the features together at the reducer level. This takes a"},{"type":"text","text":" "},{"text":"few steps. Go back to the ContactsFeature.swift file where we built the ","type":"text"},{"code":"ContactsFeature","type":"codeVoice"},{"type":"text","text":" "},{"type":"text","text":"reducer for handling the logic and behavior of the list of contacts."}]}],"code":"02-01-02-code-0000.swift","runtimePreview":null,"caption":[],"type":"step"},{"code":"02-01-02-code-0001.swift","runtimePreview":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Integrate the features’ states together by using the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","isActive":true,"type":"reference"},{"text":" ","type":"text"},{"type":"text","text":"macro to hold onto an optional value."}]}],"media":null,"caption":[{"inlineContent":[{"type":"text","text":"A "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" value represents that the “Add Contact” feature is not presented, and a non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" "},{"type":"text","text":"value represents that it is presented."}],"type":"paragraph"}],"type":"step"},{"type":"step","caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This allows the parent to observe every action sent from the child feature."}]}],"code":"02-01-02-code-0002.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"text":"Integrate the feature’s actions together by adding a case that holds onto a","type":"text"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","isActive":true,"type":"reference"},{"type":"text","text":"."}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"Since a new case has been added to the action enum we must now handle it in the main"},{"text":" ","type":"text"},{"type":"text","text":"reducer. For now we will do nothing for this case and return "},{"type":"codeVoice","code":".none"},{"type":"text","text":", but soon we will do"},{"type":"text","text":" "},{"text":"more here.","type":"text"}],"type":"paragraph"}],"caption":[],"code":"02-01-02-code-0003.swift","type":"step","runtimePreview":null,"media":null},{"caption":[{"type":"paragraph","inlineContent":[{"type":"text","text":"This creates a new reducer that runs the child reducer when a child"},{"type":"text","text":" "},{"type":"text","text":"action comes into the system, and runs the parent reducer on all actions. It also"},{"text":" ","type":"text"},{"type":"text","text":"automatically handles effect cancellation when the child feature is dismissed, and a lot"},{"text":" ","type":"text"},{"text":"more. See the documentation for more information.","type":"text"}]}],"content":[{"inlineContent":[{"type":"text","text":"Integrate the reducers together by making use of the"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q"},{"type":"text","text":" "},{"text":"reducer operator.","type":"text"}],"type":"paragraph"}],"media":null,"type":"step","code":"02-01-02-code-0004.swift","runtimePreview":null},{"type":"paragraph","inlineContent":[{"text":"That is all it takes to integrate the two features’ domains together. Before moving onto the","type":"text"},{"type":"text","text":" "},{"type":"text","text":"view, we can start flexing some of the muscles that the library gives us. Because the two"},{"text":" ","type":"text"},{"text":"features are so tightly integrated together we can now easily implement the presentation and","type":"text"},{"type":"text","text":" "},{"text":"dismissal of the “Add Contact” feature.","type":"text"}]},{"code":"02-01-02-code-0005.swift","content":[{"inlineContent":[{"type":"text","text":"When the “+” button is tapped in the contacts list feature we can now populate the"},{"type":"text","text":" "},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state to represent that the feature should be presented."}],"type":"paragraph"}],"runtimePreview":null,"caption":[],"type":"step","media":null},{"caption":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"We are destructuring on the"},{"text":" ","type":"text"},{"type":"reference","isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)"},{"type":"text","text":" case in order to listen for"},{"type":"text","text":" "},{"type":"text","text":"actions inside the “Add Contact” feature."}]}],"name":"Note","type":"aside","style":"note"}],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"When the “Cancel” button is tapped "},{"inlineContent":[{"type":"text","text":"inside"}],"type":"emphasis"},{"type":"text","text":" the “Add Contacts” feature we want to dismiss"},{"text":" ","type":"text"},{"type":"text","text":"the feature and do nothing else. This can be accomplished by simply "},{"type":"codeVoice","code":"nil"},{"text":"-ing out the","type":"text"},{"type":"text","text":" "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" state."}]}],"code":"02-01-02-code-0006.swift","runtimePreview":null,"type":"step","media":null},{"code":"02-01-02-code-0007.swift","media":null,"runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"When the “Save” button is tapped "},{"type":"emphasis","inlineContent":[{"text":"inside","type":"text"}]},{"type":"text","text":" the “Add Contacts” feature we want to not only"},{"type":"text","text":" "},{"text":"dismiss the feature, but we also want to add the new contact to the collection of contacts","type":"text"},{"type":"text","text":" "},{"text":"held in ","type":"text"},{"type":"codeVoice","code":"ContactsFeature.State"},{"type":"text","text":"."}],"type":"paragraph"}],"caption":[],"type":"step"},{"type":"paragraph","inlineContent":[{"type":"text","text":"That is all it takes to implement communication between parent and child features. The parent"},{"type":"text","text":" "},{"text":"feature can create state in order to drive navigation, and the parent feature can listen for","type":"text"},{"type":"text","text":" "},{"type":"text","text":"child actions to figure out what additional logic it wants to layer on. Next we need to"},{"type":"text","text":" "},{"text":"integrate the views together.","type":"text"}]}],"contentSection":[{"mediaPosition":"trailing","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Now that we have our two isolated features built, it is time to integrate them together so"},{"text":" ","type":"text"},{"text":"that you can navigate to the “Add Contact” screen from the contacts list screen. To do this we","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"will first integrate the features’ reducers, which consists of utilizing"},{"text":" ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","type":"reference","isActive":true},{"type":"text","text":" and "},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"reference"},{"text":" ","type":"text"},{"text":"to integrate the domains, and the reducer operator","type":"text"},{"type":"text","text":" "},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","isActive":true},{"type":"text","text":" to"},{"text":" ","type":"text"},{"type":"text","text":"integrate the reducers."}]}],"kind":"contentAndMedia"}],"anchor":"Integrate-reducers"},{"anchor":"Integrate-views","stepsSection":[{"caption":[],"code":"02-01-02-code-0008.swift","media":null,"content":[{"inlineContent":[{"text":"Recall that view currently looks like this. It is a simple list with a row for each contact,","type":"text"},{"text":" ","type":"text"},{"text":"and we have a navigation title and toolbar. We need to figure out how to present a sheet","type":"text"},{"type":"text","text":" "},{"text":"in this view whenever the ","type":"text"},{"type":"codeVoice","code":"addContact"},{"text":" state flips to non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":"."}],"type":"paragraph"}],"runtimePreview":null,"type":"step"},{"inlineContent":[{"type":"text","text":"The library comes with a variety of tools that mimic SwiftUI’s native navigation tools (such"},{"type":"text","text":" "},{"type":"text","text":"as sheets, popovers, fullscreen covers, alerts, and confirmation dialogs), but they take"},{"text":" ","type":"text"},{"isActive":true,"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"reference"},{"type":"text","text":"s instead of bindings."}],"type":"paragraph"},{"code":"02-01-02-code-0009.swift","caption":[{"type":"aside","style":"note","name":"Note","content":[{"inlineContent":[{"text":"If you are targeting older platforms and do not have access to ","type":"text"},{"type":"codeVoice","code":"@Bindable"},{"text":", you can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"instead use "},{"code":"@Perception.Bindable","type":"codeVoice"},{"text":", which comes with the library.","type":"text"}],"type":"paragraph"}]}],"type":"step","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"@Bindable","type":"codeVoice"},{"text":" property wrapper to derive a binding to a store, which can be scoped","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"down to just the presentation domain of the "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" feature, and passed to the"},{"text":" ","type":"text"},{"code":"sheet(item:)","type":"codeVoice"},{"text":" view modifier. When the ","type":"text"},{"type":"codeVoice","code":"addContact"},{"type":"text","text":" state becomes non-"},{"type":"codeVoice","code":"nil"},{"type":"text","text":", a new store"},{"type":"text","text":" "},{"text":"will be derived focused only on the ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":" domain, which is what you can pass"},{"text":" ","type":"text"},{"text":"to the ","type":"text"},{"code":"AddContactView","type":"codeVoice"},{"type":"text","text":"."}]}],"runtimePreview":null},{"type":"step","runtimePreview":null,"content":[{"inlineContent":[{"type":"text","text":"Run the app in the preview to show that it works as expected. Tapping the “+” icon brings up"},{"type":"text","text":" "},{"text":"the “AddContactFeature” in a sheet, and tapping “Save” adds a new contact to the list,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"whereas tapping “Cancel” does not."}],"type":"paragraph"}],"media":"ch02-sub01-sec03-image-0000.mov","code":null,"caption":[]}],"title":"Integrate views","contentSection":[{"kind":"contentAndMedia","mediaPosition":"trailing","content":[{"inlineContent":[{"type":"text","text":"Now that we have integrated the domain and reducers of the two features we must integrate"},{"type":"text","text":" "},{"type":"text","text":"their views. In particular, we will present an "},{"type":"codeVoice","code":"AddContactView"},{"type":"text","text":" from the "},{"code":"ContactsView","type":"codeVoice"},{"text":".","type":"text"}],"type":"paragraph"}]}]},{"contentSection":[{"content":[{"type":"paragraph","inlineContent":[{"text":"In the previous sections we facilitated child-to-parent communication by having the parent","type":"text"},{"type":"text","text":" "},{"text":"reducer inspect the actions in the child so that we could determine when the “Save” and","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"“Cancel” buttons were tapped. This is not ideal since it may lead to the parent making"},{"type":"text","text":" "},{"text":"assumptions about what logic it should perform when something happens in the child feature.","type":"text"}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"A better pattern is to use so-called “delegate actions” for the child feature to directly tell"},{"type":"text","text":" "},{"text":"the parent what it wants done.","type":"text"}]}],"mediaPosition":"trailing","kind":"contentAndMedia"}],"title":"Child-to-parent communication","stepsSection":[{"caption":[],"code":"02-01-04-code-0000.swift","runtimePreview":null,"media":null,"content":[{"inlineContent":[{"type":"text","text":"Go to AddContactFeature.swift and add a new "},{"type":"codeVoice","code":"Delegate"},{"text":" action enum to the","type":"text"},{"text":" ","type":"text"},{"type":"codeVoice","code":"AddContactFeature"},{"type":"text","text":". This enum will describe all the actions that the parent can listen for"},{"text":" ","type":"text"},{"text":"and interpret. It allows the child feature to directly tell the parent what it wants done.","type":"text"}],"type":"paragraph"}],"type":"step"},{"style":"important","name":"Important","type":"aside","content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Delegate actions are the most general way of communicating from the child domain"},{"type":"text","text":" "},{"type":"text","text":"back to the parent, but there are other techniques. We could have also utilized the"},{"type":"text","text":" "},{"type":"codeVoice","code":"@Shared"},{"text":" property wrapper for the collection of contacts, which would allow the","type":"text"},{"text":" ","type":"text"},{"code":"AddContactFeature","type":"codeVoice"},{"text":" to insert a new contact directly into the parent collection without any","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"further steps. This can be powerful, but we will use delegate actions for this tutorial. To"},{"type":"text","text":" "},{"text":"read more about ","type":"text"},{"code":"@Shared","type":"codeVoice"},{"type":"text","text":" see the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","type":"reference","isActive":true},{"text":" article, and see the","type":"text"},{"type":"text","text":" "},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps"},{"type":"text","text":" tutorial where we use this technique, in particular in"},{"type":"text","text":" "},{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","isActive":true,"type":"reference"},{"text":" section.","type":"text"}]}]},{"media":null,"content":[{"inlineContent":[{"type":"text","text":"Handle the new case in the reducer, but we should never actually perform any logic in this"},{"type":"text","text":" "},{"type":"text","text":"case. Only the parent should listen for "},{"type":"codeVoice","code":"delegate"},{"type":"text","text":" actions and respond accordingly."}],"type":"paragraph"}],"caption":[],"type":"step","runtimePreview":null,"code":"02-01-04-code-0001.swift"},{"caption":[],"content":[{"inlineContent":[{"type":"text","text":"Anytime we want the child feature to communicate to the parent we will return an effect that"},{"text":" ","type":"text"},{"type":"text","text":"immediately and synchronously sends a delegate action. For example, when the “Save” button"},{"text":" ","type":"text"},{"type":"text","text":"is tapped, we will send the "},{"code":"saveContact","type":"codeVoice"},{"text":" action.","type":"text"}],"type":"paragraph"}],"media":null,"code":"02-01-04-code-0002.swift","runtimePreview":null,"type":"step"},{"content":[{"inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift and update the reducer to listen for delegate actions to"},{"text":" ","type":"text"},{"text":"figure out when it is time to dismiss or save the contact.","type":"text"}],"type":"paragraph"}],"type":"step","media":null,"runtimePreview":null,"code":"02-01-04-code-0003.swift","caption":[]},{"type":"paragraph","inlineContent":[{"type":"text","text":"The application should work exactly as it did before the “delegate action” refactor, but now"},{"text":" ","type":"text"},{"type":"text","text":"the child feature can accurately describe what it wants the parent to do rather than the"},{"type":"text","text":" "},{"type":"text","text":"parent make assumptions. There is still room for improvement though. It is very common for a"},{"text":" ","type":"text"},{"text":"child feature to want to dismiss itself, such as is the case when tapping “Cancel”. It is too","type":"text"},{"type":"text","text":" "},{"text":"cumbersome to create a delegate action just to communicate this to the parent, and so the","type":"text"},{"text":" ","type":"text"},{"text":"library comes with a special tool for this.","type":"text"}]},{"caption":[],"runtimePreview":null,"media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Go back to AddContactFeature.swift and add a dependency on","type":"text"},{"text":" ","type":"text"},{"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","isActive":true},{"text":". This is a value that allows child features to","type":"text"},{"type":"text","text":" "},{"type":"text","text":"dismiss themselves without any direct contact with the parent feature."}]}],"code":"02-01-04-code-0004.swift","type":"step"},{"runtimePreview":null,"type":"step","code":"02-01-04-code-0005.swift","media":null,"content":[{"type":"paragraph","inlineContent":[{"text":"Use the ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":" dependency by returning an effect and invoking it. This will communicate"},{"type":"text","text":" "},{"text":"with the parent in order for a ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss"},{"type":"text","text":" action"},{"text":" ","type":"text"},{"type":"text","text":"to be sent, which will clear out the state driving the presentation."}]}],"caption":[{"content":[{"type":"paragraph","inlineContent":[{"text":"The ","type":"text"},{"code":"dismiss","type":"codeVoice"},{"type":"text","text":" dependency is asynchronous which means it is only appropriate to"},{"text":" ","type":"text"},{"text":"invoke from an effect.","type":"text"}]}],"type":"aside","style":"note","name":"Note"}]},{"caption":[],"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Remove the "},{"code":"cancel","type":"codeVoice"},{"type":"text","text":" action from the "},{"code":"Delegate","type":"codeVoice"},{"type":"text","text":" enum because it is no longer needed. We do"},{"type":"text","text":" "},{"type":"text","text":"not need to explicitly communicate to the parent that it should dismiss the child. That is"},{"text":" ","type":"text"},{"type":"text","text":"all handled by the "},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","type":"reference","isActive":true},{"text":".","type":"text"}]}],"runtimePreview":null,"media":null,"code":"02-01-04-code-0006.swift","type":"step"},{"media":null,"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Go back to ContactsFeature.swift. We can also remove the "},{"type":"codeVoice","code":"cancel"},{"type":"text","text":" logic from the"},{"text":" ","type":"text"},{"type":"codeVoice","code":"ContactsFeature"},{"type":"text","text":" reducer and it is no longer necessary to explicitly "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the"},{"type":"text","text":" "},{"code":"addContact","type":"codeVoice"},{"type":"text","text":" state. That is already taken care of."}]}],"code":"02-01-04-code-0007.swift","type":"step","caption":[],"runtimePreview":null}],"anchor":"Child-to-parent-communication"}]},{"featuredEyebrow":"Tutorial","action":{"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","isActive":true,"overridingTitleInlineContent":[{"type":"text","text":"Get started"}],"overridingTitle":"Get started","type":"reference"},"abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"type":"text","text":"able to present "},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"kind":"callToAction","title":"Multiple presentation destinations"}],"hierarchy":{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","modules":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","projects":[{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature"},{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","kind":"task"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies"}]},{"sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","projects":[{"sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication"}],"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","sections":[{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"task"}]},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","sections":[{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","kind":"task"},{"reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"task"},{"kind":"task","reference":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact"}]}]}],"paths":[["doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/$volume","doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation"]]},"schemaVersion":{"patch":0,"major":0,"minor":3},"metadata":{"categoryPathComponent":"MeetComposableArchitecture","title":"Your first presentation","role":"project","category":"The Composable Architecture"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation"]}],"identifier":{"url":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","interfaceLanguage":"swift"},"references":{"02-01-01-code-0004.swift":{"identifier":"02-01-01-code-0004.swift","fileType":"swift","fileName":"AddContactFeature.swift","type":"file","content":["import SwiftUI","","struct AddContactView: View {","  @Bindable var store: StoreOf<AddContactFeature>","}"],"highlights":[],"syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction":{"navigatorTitle":[{"kind":"identifier","text":"PresentationAction"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction","type":"topic","url":"\/documentation\/composablearchitecture\/presentationaction","role":"symbol","kind":"symbol","title":"PresentationAction","abstract":[{"type":"text","text":"A wrapper type for actions that can be presented."}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PresentationAction","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Managing-a-timer":{"abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Managing-a-timer","title":"Managing a timer","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Managing-a-timer","role":"pseudoSymbol","kind":"section"},"02-01-02-code-0000.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"identifier":"02-01-02-code-0000.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Delete-contacts":{"type":"section","abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be","type":"text"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"text":" features.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Delete-contacts","title":"Delete contacts","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Delete-contacts","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Non-exhaustive-testing":{"type":"section","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Non-exhaustive-testing","title":"Non-exhaustive testing","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Non-exhaustive-testing","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Create-a-reducer":{"type":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Create-a-reducer","title":"Create a reducer","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Create-a-reducer","kind":"section"},"ch02-sub01-sec01-image-0002.png":{"alt":null,"identifier":"ch02-sub01-sec01-image-0002.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/ch02-sub01-sec01-image-0002.png"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/dismiss":{"kind":"symbol","abstract":[{"type":"text","text":"An action sent to "},{"code":"nil","type":"codeVoice"},{"type":"text","text":" out the associated presentation state."}],"url":"\/documentation\/composablearchitecture\/presentationaction\/dismiss","fragments":[{"text":"case","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"dismiss"}],"title":"PresentationAction.dismiss","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/dismiss","type":"topic","role":"symbol"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationState":{"navigatorTitle":[{"kind":"identifier","text":"PresentationState"}],"url":"\/documentation\/composablearchitecture\/presentationstate","role":"symbol","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","title":"PresentationState","abstract":[{"text":"A property wrapper for state that can be presented.","type":"text"}],"type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"PresentationState"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Deriving-child-stores":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Deriving-child-stores","title":"Deriving child stores","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Deriving-child-stores","role":"pseudoSymbol","kind":"section"},"02-01-02-code-0002.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"identifier":"02-01-02-code-0002.swift","fileType":"swift","type":"file","highlights":[{"line":10}],"fileName":"ContactsFeature.swift","syntax":"swift"},"02-01-01-code-0001.swift":{"content":["import SwiftUI","","struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","  }","}"],"identifier":"02-01-01-code-0001.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Presents()":{"type":"topic","abstract":[{"text":"Wraps a property with ","type":"text"},{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationState","type":"reference","isActive":true},{"text":" and observes it.","type":"text"}],"fragments":[{"text":"macro","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Presents","kind":"identifier"},{"text":"()","kind":"text"}],"url":"\/documentation\/composablearchitecture\/presents()","title":"Presents()","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Presents()","kind":"symbol"},"02-01-02-code-0001.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"identifier":"02-01-02-code-0001.swift","fileType":"swift","type":"file","highlights":[{"line":5}],"fileName":"ContactsFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-delete-contact-flow":{"type":"section","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-delete-contact-flow","title":"Testing the delete contact flow","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-delete-contact-flow","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-reducers":{"abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-reducers","title":"Integrate reducers","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-reducers","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-effects":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-effects","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"title":"Testing effects","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-effects","kind":"section","role":"pseudoSymbol"},"02-01-04-code-0005.swift":{"identifier":"02-01-04-code-0005.swift","fileType":"swift","fileName":"AddContactFeature.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .run { _ in await self.dismiss() }","        ","      case .delegate:","        return .none","        ","      case .saveButtonTapped:","        return .run { [contact = state.contact] send in","          await send(.delegate(.saveContact(contact)))","          await self.dismiss()","        }","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"highlights":[{"line":24},{"line":30},{"line":31},{"line":32},{"line":33}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation":{"estimatedTime":"30min","type":"topic","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"text":"state.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation","title":"Your first presentation","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation","kind":"project"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Navigation":{"type":"topic","abstract":[],"url":"\/tutorials\/meetcomposablearchitecture\/navigation","title":"Navigation","role":"article","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Navigation","kind":"article"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Bindings":{"title":"Working with SwiftUI bindings","abstract":[{"type":"text","text":"Learn how to connect features written in the Composable Architecture to SwiftUI bindings."}],"kind":"article","type":"topic","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Bindings","url":"\/documentation\/composablearchitecture\/bindings","role":"article"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Composing-reducers":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Composing-reducers","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"type":"text","text":" "},{"text":"feature that contains the ","type":"text"},{"type":"codeVoice","code":"CounterFeature"},{"text":" we have been building thus far.","type":"text"}],"title":"Composing reducers","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Composing-reducers","kind":"section","role":"pseudoSymbol"},"02-01-04-code-0007.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      \/\/ case .addContact(.presented(.delegate(.cancel))):","      \/\/   state.addContact = nil","      \/\/   return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        state.contacts.append(contact)","        \/\/ state.addContact = nil","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-01-04-code-0007.swift","fileType":"swift","type":"file","highlights":[{"line":21},{"line":22},{"line":23},{"line":27}],"fileName":"ContactsFeature.swift","syntax":"swift"},"02-01-02-code-0004.swift":{"identifier":"02-01-02-code-0004.swift","fileType":"swift","fileName":"ContactsFeature.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"highlights":[{"line":23},{"line":24},{"line":25}],"syntax":"swift"},"02-01-02-code-0006.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-01-02-code-0006.swift","fileType":"swift","type":"file","highlights":[{"line":21},{"line":22},{"line":23},{"line":24}],"fileName":"ContactsFeature.swift","syntax":"swift"},"ch02-sub01-sec03-image-0000.mov":{"alt":null,"identifier":"ch02-sub01-sec03-image-0000.mov","type":"video","variants":[{"url":"\/videos\/ComposableArchitecture\/ch02-sub01-sec03-image-0000.mov","traits":["1x","light"]}],"poster":null},"02-01-04-code-0006.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      \/\/ case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .run { _ in await self.dismiss() }","        ","      case .delegate:","        return .none","        ","      case .saveButtonTapped:","        return .run { [contact = state.contact] send in","          await send(.delegate(.saveContact(contact)))","          await self.dismiss()","        }","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"identifier":"02-01-04-code-0006.swift","fileType":"swift","type":"file","highlights":[{"line":15}],"fileName":"AddContactFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations":{"estimatedTime":"30min","type":"topic","abstract":[{"type":"text","text":"In the previous section you learned how to model your domains so that a parent feature can"},{"text":" ","type":"text"},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"text":" ","type":"text"},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"text":"many","type":"text"}]},{"text":" features.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations","title":"Multiple presentation destinations","role":"project","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations","kind":"project"},"doc://ComposableArchitecture/tutorials/BuildingSyncUps":{"kind":"overview","abstract":[{"text":"The SyncUps application is a recreation of one of Apple’s more interesting demo applications,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"Scrumdinger. We recreate it from scratch using the Composable Architecture, with a focus on"},{"text":" ","type":"text"},{"text":"domain modeling, controlling dependencies, and testability.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/BuildingSyncUps","title":"Building SyncUps","type":"topic","url":"\/tutorials\/buildingsyncups","role":"overview"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/EditingAndDeletingSyncUp#Deleting-the-sync-up":{"kind":"section","abstract":[{"type":"text","text":"Let’s implement two major pieces of functionality in the detail screen: editing the sync-up and"},{"text":" ","type":"text"},{"type":"text","text":"deleting the sync-up. This will force us to face a number of common problems in app development"},{"type":"text","text":" "},{"text":"all at once, including view reuse, navigation, alerts, and parent-child communication patterns.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/EditingAndDeletingSyncUp#Deleting-the-sync-up","title":"Deleting the sync-up","type":"section","url":"\/tutorials\/composablearchitecture\/editinganddeletingsyncup#Deleting-the-sync-up","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature","title":"Your first feature","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature","role":"project","kind":"project","estimatedTime":"20min"},"02-01-02-code-0009.swift":{"identifier":"02-01-02-code-0009.swift","fileType":"swift","fileName":"ContactsFeature.swift","type":"file","content":["struct ContactsView: View {","  @Bindable var store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","    .sheet(","      item: $store.scope(state: \\.addContact, action: \\.addContact)","    ) { addContactStore in","      NavigationStack {","        AddContactView(store: addContactStore)","      }","    }","  }","}"],"highlights":[{"line":2},{"line":22},{"line":23},{"line":24},{"line":25},{"line":26},{"line":27},{"line":28}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-with-SwiftUI":{"abstract":[{"type":"text","text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then"},{"text":" ","type":"text"},{"type":"text","text":"learn how to hook up that feature to a SwiftUI view."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-with-SwiftUI","title":"Integrating with SwiftUI","url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-with-SwiftUI","role":"pseudoSymbol","kind":"section"},"ch02-sub01-sec01-image-0001.png":{"alt":null,"identifier":"ch02-sub01-sec01-image-0001.png","type":"image","variants":[{"traits":["1x","light"],"url":"\/images\/ComposableArchitecture\/ch02-sub01-sec01-image-0001.png"}]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Store":{"navigatorTitle":[{"text":"Store","kind":"identifier"}],"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Store","type":"topic","url":"\/documentation\/composablearchitecture\/store","role":"symbol","kind":"symbol","title":"Store","abstract":[{"text":"A store represents the runtime that powers the application. It is the object that you will pass","type":"text"},{"type":"text","text":" "},{"type":"text","text":"around to views that need to interact with the application."}],"fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Store","kind":"identifier"}]},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-01-YourFirstFeature#Integrating-into-the-app":{"type":"section","abstract":[{"text":"Learn how to create a reducer to implement the logic and behavior of a feature, and then","type":"text"},{"type":"text","text":" "},{"text":"learn how to hook up that feature to a SwiftUI view.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-01-yourfirstfeature#Integrating-into-the-app","title":"Integrating into the app","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-01-YourFirstFeature#Integrating-into-the-app","kind":"section"},"02-01-04-code-0000.swift":{"identifier":"02-01-04-code-0000.swift","fileType":"swift","fileName":"AddContactFeature.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .none","        ","      case .saveButtonTapped:","        return .none","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"highlights":[{"line":11},{"line":14},{"line":15},{"line":16},{"line":17}],"syntax":"swift"},"02-01-01-code-0003.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case saveButtonTapped","    case setName(String)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .none","        ","      case .saveButtonTapped:","        return .none","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"identifier":"02-01-01-code-0003.swift","fileType":"swift","type":"file","highlights":[],"fileName":"AddContactFeature.swift","syntax":"swift"},"02-01-02-code-0003.swift":{"identifier":"02-01-02-code-0003.swift","fileType":"swift","fileName":"ContactsFeature.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","        ","      case .addContact:","        return .none","      }","    }","  }","}"],"highlights":[{"line":18},{"line":19},{"line":20}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-state-changes":{"kind":"section","role":"pseudoSymbol","type":"section","title":"Testing state changes","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-state-changes","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-state-changes"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#What-is-a-side-effect":{"kind":"section","role":"pseudoSymbol","type":"section","title":"What is a side effect?","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#What-is-a-side-effect","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#What-is-a-side-effect"},"02-01-02-code-0007.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case .addContact(.presented(.cancelButtonTapped)):","        state.addContact = nil","        return .none","        ","      case .addContact(.presented(.saveButtonTapped)):","        guard let contact = state.addContact?.contact","        else { return .none }","        state.contacts.append(contact)","        state.addContact = nil","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-01-02-code-0007.swift","fileType":"swift","type":"file","highlights":[{"line":25},{"line":26},{"line":27},{"line":28},{"line":29},{"line":30},{"line":31}],"fileName":"ContactsFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Drill-down-to-contact-detail":{"type":"section","abstract":[{"type":"text","text":"We will continue with the contacts application built in previous sections by adding"},{"text":" ","type":"text"},{"type":"text","text":"a navigation stack to the root of the application so that we can drill down to a contact."}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Drill-down-to-contact-detail","title":"Drill-down to contact detail","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Drill-down-to-contact-detail","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation#Testing-the-add-contact-flow":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation#Testing-the-add-contact-flow","abstract":[{"text":"Learn how to write tests for features built using the library’s navigation tools, including","type":"text"},{"type":"text","text":" "},{"text":"how multiple features integrate together and communicate with each other.","type":"text"}],"title":"Testing the add contact flow","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation#Testing-the-add-contact-flow","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Contact-detail-feature":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Contact-detail-feature","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"title":"Contact detail feature","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Contact-detail-feature","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Controlling-dependencies":{"type":"section","abstract":[{"text":"Learn how to write test for the counter built in previous tutorials, including how to assert","type":"text"},{"type":"text","text":" "},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Controlling-dependencies","title":"Controlling dependencies","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Controlling-dependencies","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures#Adding-a-tab-view":{"abstract":[{"type":"text","text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures#Adding-a-tab-view","title":"Adding a tab view","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures#Adding-a-tab-view","role":"pseudoSymbol","kind":"section"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture","abstract":[{"type":"text","text":"The Composable Architecture (TCA, for short) is a library for building applications in a"},{"text":" ","type":"text"},{"text":"consistent and understandable way, with composition, testing, and ergonomics in mind. It can be","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"used in SwiftUI, UIKit, and more, and on any Apple platform (iOS, macOS, tvOS, and watchOS)."}],"title":"Meet the Composable Architecture","url":"\/tutorials\/meetcomposablearchitecture","kind":"overview","role":"overview"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks":{"kind":"project","title":"Navigation stacks","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks","estimatedTime":"30min","role":"project","url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Integrate-views":{"type":"section","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Integrate-views","kind":"section","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Integrate-views","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"type":"text","text":" "},{"text":"parent features. To begin, we will explore presenting a feature that is driven off of optional","type":"text"},{"type":"text","text":" "},{"type":"text","text":"state."}],"title":"Integrate views"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-03-TestingPresentation":{"kind":"project","title":"Testing presentation","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-03-TestingPresentation","estimatedTime":"40min","role":"project","url":"\/tutorials\/composablearchitecture\/02-03-testingpresentation","abstract":[{"type":"text","text":"Learn how to write tests for features built using the library’s navigation tools, including"},{"text":" ","type":"text"},{"type":"text","text":"how multiple features integrate together and communicate with each other."}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/Reducer/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q":{"title":"ifLet(_:action:destination:fileID:filePath:line:column:)","type":"topic","kind":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/Reducer\/ifLet(_:action:destination:fileID:filePath:line:column:)-4ub6q","url":"\/documentation\/composablearchitecture\/reducer\/iflet(_:action:destination:fileid:filepath:line:column:)-4ub6q","fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"ifLet","kind":"identifier"},{"kind":"text","text":"<"},{"kind":"genericParameter","text":"DestinationState"},{"text":", ","kind":"text"},{"text":"DestinationAction","kind":"genericParameter"},{"text":", ","kind":"text"},{"text":"Destination","kind":"genericParameter"},{"text":">(","kind":"text"},{"preciseIdentifier":"s:s15WritableKeyPathC","text":"WritableKeyPath","kind":"typeIdentifier"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"kind":"text","text":", "},{"text":"PresentationState","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture17PresentationStateV"},{"kind":"text","text":"<"},{"text":"DestinationState","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"text":"action","kind":"externalParam"},{"kind":"text","text":": "},{"kind":"typeIdentifier","preciseIdentifier":"s:9CasePaths0A7KeyPatha","text":"CaseKeyPath"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"text":".","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa","text":"Action"},{"kind":"text","text":", "},{"text":"PresentationAction","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture18PresentationActionO"},{"text":"<","kind":"text"},{"text":"DestinationAction","kind":"typeIdentifier"},{"text":">>, ","kind":"text"},{"kind":"externalParam","text":"destination"},{"text":": () -> ","kind":"text"},{"kind":"typeIdentifier","text":"Destination"},{"kind":"text","text":", "},{"kind":"externalParam","text":"fileID"},{"text":": ","kind":"text"},{"text":"StaticString","kind":"typeIdentifier","preciseIdentifier":"s:s12StaticStringV"},{"text":", ","kind":"text"},{"text":"filePath","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"StaticString","preciseIdentifier":"s:s12StaticStringV","kind":"typeIdentifier"},{"kind":"text","text":", "},{"text":"line","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","text":"UInt","preciseIdentifier":"s:Su"},{"text":", ","kind":"text"},{"text":"column","kind":"externalParam"},{"text":": ","kind":"text"},{"preciseIdentifier":"s:Su","kind":"typeIdentifier","text":"UInt"},{"text":") -> ","kind":"text"},{"text":"some","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP","text":"Reducer"},{"kind":"text","text":"<"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"text":"State","kind":"typeIdentifier","preciseIdentifier":"s:22ComposableArchitecture7ReducerP5StateQa"},{"text":", ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Action","preciseIdentifier":"s:22ComposableArchitecture7ReducerP6ActionQa"},{"kind":"text","text":">\n"}],"role":"symbol","abstract":[{"text":"Embeds a child reducer in a parent domain that works on an optional property of parent state.","type":"text"}]},"02-01-01-code-0005.swift":{"identifier":"02-01-01-code-0005.swift","fileType":"swift","fileName":"AddContactFeature.swift","type":"file","content":["import SwiftUI","","struct AddContactView: View {","  @Bindable var store: StoreOf<AddContactFeature>","","  var body: some View {","    Form {","      TextField(\"Name\", text: $store.contact.name.sending(\\.setName))","    }","  }","}"],"highlights":[{"line":5},{"line":6},{"line":7},{"line":8},{"line":9},{"line":10}],"syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-04-NavigationStacks#Deleting-a-contact":{"type":"section","abstract":[{"text":"We will continue with the contacts application built in previous sections by adding","type":"text"},{"type":"text","text":" "},{"text":"a navigation stack to the root of the application so that we can drill down to a contact.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/02-04-navigationstacks#Deleting-a-contact","title":"Deleting a contact","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-04-NavigationStacks#Deleting-a-contact","kind":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Child-to-parent-communication":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Child-to-parent-communication","abstract":[{"text":"The Composable Architecture offers a variety of tools to help you present child features from","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"title":"Child-to-parent communication","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Child-to-parent-communication","kind":"section","role":"pseudoSymbol"},"02-01-04-code-0004.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate {","      case cancel","      case saveContact(Contact)","    }","  }","  @Dependency(\\.dismiss) var dismiss","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .send(.delegate(.cancel))","        ","      case .delegate:","        return .none","        ","      case .saveButtonTapped:","        return .send(.delegate(.saveContact(state.contact)))","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"identifier":"02-01-04-code-0004.swift","fileType":"swift","type":"file","highlights":[{"line":19}],"fileName":"AddContactFeature.swift","syntax":"swift"},"02-01-02-code-0005.swift":{"identifier":"02-01-02-code-0005.swift","fileType":"swift","fileName":"ContactsFeature.swift","type":"file","content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"highlights":[{"line":16},{"line":17},{"line":18}],"syntax":"swift"},"02-01-04-code-0003.swift":{"content":["@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    @Presents var addContact: AddContactFeature.State?","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","    case addContact(PresentationAction<AddContactFeature.Action>)","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        state.addContact = AddContactFeature.State(","          contact: Contact(id: UUID(), name: \"\")","        )","        return .none","        ","      case .addContact(.presented(.delegate(.cancel))):","        state.addContact = nil","        return .none","        ","      case let .addContact(.presented(.delegate(.saveContact(contact)))):","        \/\/ guard let contact = state.addContact?.contact","        \/\/ else { return .none }","        state.contacts.append(contact)","        state.addContact = nil","        return .none","        ","      case .addContact:","        return .none","      }","    }","    .ifLet(\\.$addContact, action: \\.addContact) {","      AddContactFeature()","    }","  }","}"],"identifier":"02-01-04-code-0003.swift","fileType":"swift","type":"file","highlights":[{"line":21},{"line":25},{"line":26},{"line":27}],"fileName":"ContactsFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/SharingState":{"url":"\/documentation\/composablearchitecture\/sharingstate","abstract":[{"text":"Learn techniques for sharing state throughout many parts of your application, and how to persist","type":"text"},{"type":"text","text":" "},{"text":"data to user defaults, the file system, and other external mediums.","type":"text"}],"kind":"article","type":"topic","role":"article","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/SharingState","title":"Sharing state"},"doc://ComposableArchitecture/tutorials/MeetComposableArchitecture/Essentials":{"kind":"article","title":"Essentials","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/MeetComposableArchitecture\/Essentials","role":"article","url":"\/tutorials\/meetcomposablearchitecture\/essentials","abstract":[],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-01-YourFirstPresentation#Project-set-up":{"kind":"section","title":"Project set up","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-01-YourFirstPresentation#Project-set-up","role":"pseudoSymbol","url":"\/tutorials\/composablearchitecture\/02-01-yourfirstpresentation#Project-set-up","abstract":[{"type":"text","text":"The Composable Architecture offers a variety of tools to help you present child features from"},{"text":" ","type":"text"},{"type":"text","text":"parent features. To begin, we will explore presenting a feature that is driven off of optional"},{"text":" ","type":"text"},{"type":"text","text":"state."}],"type":"section"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/02-02-MultipleDestinations#Improve-domain-modeling":{"abstract":[{"text":"In the previous section you learned how to model your domains so that a parent feature can","type":"text"},{"type":"text","text":" "},{"type":"text","text":"present a child feature. Now let’s learn what has to be done if a parent feature wants to be"},{"type":"text","text":" "},{"text":"able to present ","type":"text"},{"type":"emphasis","inlineContent":[{"type":"text","text":"many"}]},{"type":"text","text":" features."}],"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/02-02-MultipleDestinations#Improve-domain-modeling","title":"Improve domain modeling","url":"\/tutorials\/composablearchitecture\/02-02-multipledestinations#Improve-domain-modeling","role":"pseudoSymbol","kind":"section"},"02-01-01-code-0000.swift":{"content":["import Foundation","import ComposableArchitecture","","struct Contact: Equatable, Identifiable {","  let id: UUID","  var name: String","}","","@Reducer","struct ContactsFeature {","  @ObservableState","  struct State: Equatable {","    var contacts: IdentifiedArrayOf<Contact> = []","  }","  enum Action {","    case addButtonTapped","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .addButtonTapped:","        \/\/ TODO: Handle action","        return .none","      }","    }","  }","}"],"identifier":"02-01-01-code-0000.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[]},"02-01-02-code-0008.swift":{"content":["struct ContactsView: View {","  let store: StoreOf<ContactsFeature>","  ","  var body: some View {","    NavigationStack {","      List {","        ForEach(store.contacts) { contact in","          Text(contact.name)","        }","      }","      .navigationTitle(\"Contacts\")","      .toolbar {","        ToolbarItem {","          Button {","            store.send(.addButtonTapped)","          } label: {","            Image(systemName: \"plus\")","          }","        }","      }","    }","  }","}"],"identifier":"02-01-02-code-0008.swift","fileType":"swift","type":"file","highlights":[],"fileName":"ContactsFeature.swift","syntax":"swift"},"02-01-04-code-0002.swift":{"identifier":"02-01-04-code-0002.swift","fileType":"swift","fileName":"AddContactFeature.swift","type":"file","content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .send(.delegate(.cancel))","        ","      case .delegate:","        return .none","        ","      case .saveButtonTapped:","        return .send(.delegate(.saveContact(state.contact)))","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"highlights":[{"line":23},{"line":29}],"syntax":"swift"},"02-01-04-code-0001.swift":{"content":["import ComposableArchitecture","","@Reducer","struct AddContactFeature {","  @ObservableState","  struct State: Equatable {","    var contact: Contact","  }","  enum Action {","    case cancelButtonTapped","    case delegate(Delegate)","    case saveButtonTapped","    case setName(String)","    enum Delegate: Equatable {","      case cancel","      case saveContact(Contact)","    }","  }","  var body: some ReducerOf<Self> {","    Reduce { state, action in","      switch action {","      case .cancelButtonTapped:","        return .none","        ","      case .delegate:","        return .none","        ","      case .saveButtonTapped:","        return .none","        ","      case let .setName(name):","        state.contact.name = name","        return .none","      }","    }","  }","}"],"identifier":"02-01-04-code-0001.swift","fileType":"swift","type":"file","highlights":[{"line":25},{"line":26},{"line":27}],"fileName":"AddContactFeature.swift","syntax":"swift"},"02-01-01-code-0007.swift":{"content":["#Preview {","  NavigationStack {","    AddContactView(","      store: Store(","        initialState: AddContactFeature.State(","          contact: Contact(","            id: UUID(),","            name: \"Blob\"","          )","        )","      ) {","        AddContactFeature()","      }","    )","  }","}"],"identifier":"02-01-01-code-0007.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"AddContactFeature.swift","highlights":[]},"doc://ComposableArchitecture/documentation/ComposableArchitecture/DismissEffect":{"type":"topic","abstract":[{"text":"An effect that dismisses the current presentation.","type":"text"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"DismissEffect","kind":"identifier"}],"url":"\/documentation\/composablearchitecture\/dismisseffect","title":"DismissEffect","role":"symbol","identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/DismissEffect","navigatorTitle":[{"text":"DismissEffect","kind":"identifier"}],"kind":"symbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature":{"kind":"project","title":"Testing your feature","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature","estimatedTime":"1hr 0min","role":"project","url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"type":"topic"},"doc://ComposableArchitecture/documentation/ComposableArchitecture/PresentationAction/presented(_:)":{"identifier":"doc:\/\/ComposableArchitecture\/documentation\/ComposableArchitecture\/PresentationAction\/presented(_:)","abstract":[{"text":"An action sent to the associated, non-","type":"text"},{"type":"codeVoice","code":"nil"},{"type":"text","text":" presentation state."}],"url":"\/documentation\/composablearchitecture\/presentationaction\/presented(_:)","kind":"symbol","title":"PresentationAction.presented(_:)","fragments":[{"kind":"keyword","text":"case"},{"kind":"text","text":" "},{"kind":"identifier","text":"presented"},{"kind":"text","text":"("},{"kind":"typeIdentifier","text":"Action"},{"text":")","kind":"text"}],"role":"symbol","type":"topic"},"02-01-01-code-0006.swift":{"content":["import SwiftUI","","struct AddContactView: View {","  @Bindable var store: StoreOf<AddContactFeature>","","  var body: some View {","    Form {","      TextField(\"Name\", text: $store.contact.name.sending(\\.setName))","      Button(\"Save\") {","        store.send(.saveButtonTapped)","      }","    }","    .toolbar {","      ToolbarItem {","        Button(\"Cancel\") {","          store.send(.cancelButtonTapped)","        }","      }","    }","  }","}"],"identifier":"02-01-01-code-0006.swift","fileType":"swift","type":"file","highlights":[{"line":9},{"line":10},{"line":11},{"line":13},{"line":14},{"line":15},{"line":16},{"line":17},{"line":18},{"line":19}],"fileName":"AddContactFeature.swift","syntax":"swift"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects#Performing-a-network-request":{"type":"section","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects#Performing-a-network-request","abstract":[{"text":"Learn how to communicate with the outside world in your features, and feed data from the outside","type":"text"},{"type":"text","text":" "},{"text":"back into your feature.","type":"text"}],"title":"Performing a network request","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects#Performing-a-network-request","kind":"section","role":"pseudoSymbol"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-04-ComposingFeatures":{"type":"topic","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-04-ComposingFeatures","abstract":[{"text":"Learn what makes the Composable Architecture… well… “composable”. We will create a parent","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"feature that contains the "},{"code":"CounterFeature","type":"codeVoice"},{"type":"text","text":" we have been building thus far."}],"estimatedTime":"30min","title":"Composing features","url":"\/tutorials\/composablearchitecture\/01-04-composingfeatures","kind":"project","role":"project"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-02-AddingSideEffects":{"kind":"project","title":"Adding side effects","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-02-AddingSideEffects","estimatedTime":"30min","role":"project","url":"\/tutorials\/composablearchitecture\/01-02-addingsideeffects","abstract":[{"type":"text","text":"Learn how to communicate with the outside world in your features, and feed data from the outside"},{"text":" ","type":"text"},{"type":"text","text":"back into your feature."}],"type":"topic"},"doc://ComposableArchitecture/tutorials/ComposableArchitecture/01-03-TestingYourFeature#Testing-network-requests":{"type":"section","abstract":[{"type":"text","text":"Learn how to write test for the counter built in previous tutorials, including how to assert"},{"text":" ","type":"text"},{"text":"against state changes and how effects execute and feed data back into the system.","type":"text"}],"url":"\/tutorials\/composablearchitecture\/01-03-testingyourfeature#Testing-network-requests","title":"Testing network requests","role":"pseudoSymbol","identifier":"doc:\/\/ComposableArchitecture\/tutorials\/ComposableArchitecture\/01-03-TestingYourFeature#Testing-network-requests","kind":"section"},"02-01-01-code-0002.swift":{"content":["#Preview {","  ContactsView(","    store: Store(","      initialState: ContactsFeature.State(","        contacts: [","          Contact(id: UUID(), name: \"Blob\"),","          Contact(id: UUID(), name: \"Blob Jr\"),","          Contact(id: UUID(), name: \"Blob Sr\"),","        ]","      )","    ) {","      ContactsFeature()","    }","  )","}"],"identifier":"02-01-01-code-0002.swift","type":"file","fileType":"swift","syntax":"swift","fileName":"ContactsFeature.swift","highlights":[]}}}